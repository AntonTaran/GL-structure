!function(e){var n=window.webpackHotUpdate;window.webpackHotUpdate=function(e,o){!function(e,n){if(!M[e]||!O[e])return;for(var o in O[e]=!1,n)Object.prototype.hasOwnProperty.call(n,o)&&(f[o]=n[o]);0==--h&&0===v&&E()}(e,o),n&&n(e,o)};var o,t=!0,i="095a2aaf60b8d2e6a974",a=1e4,r={},l=[],s=[];function c(e){var n=b[e];if(!n)return _;var t=function(t){return n.hot.active?(b[t]?-1===b[t].parents.indexOf(e)&&b[t].parents.push(e):(l=[e],o=t),-1===n.children.indexOf(t)&&n.children.push(t)):(console.warn("[HMR] unexpected require("+t+") from disposed module "+e),l=[]),_(t)},i=function(e){return{configurable:!0,enumerable:!0,get:function(){return _[e]},set:function(n){_[e]=n}}};for(var a in _)Object.prototype.hasOwnProperty.call(_,a)&&"e"!==a&&"t"!==a&&Object.defineProperty(t,a,i(a));return t.e=function(e){return"ready"===p&&u("prepare"),v++,_.e(e).then(n,function(e){throw n(),e});function n(){v--,"prepare"===p&&(y[e]||k(e),0===v&&0===h&&E())}},t.t=function(e,n){return 1&n&&(e=t(e)),_.t(e,-2&n)},t}var d=[],p="idle";function u(e){p=e;for(var n=0;n<d.length;n++)d[n].call(null,e)}var m,f,g,h=0,v=0,y={},O={},M={};function I(e){return+e+""===e?+e:e}function T(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return t=e,u("check"),(n=a,n=n||1e4,new Promise(function(e,o){if("undefined"==typeof XMLHttpRequest)return o(new Error("No browser support"));try{var t=new XMLHttpRequest,a=_.p+""+i+".hot-update.json";t.open("GET",a,!0),t.timeout=n,t.send(null)}catch(e){return o(e)}t.onreadystatechange=function(){if(4===t.readyState)if(0===t.status)o(new Error("Manifest request to "+a+" timed out."));else if(404===t.status)e();else if(200!==t.status&&304!==t.status)o(new Error("Manifest request to "+a+" failed."));else{try{var n=JSON.parse(t.responseText)}catch(e){return void o(e)}e(n)}}})).then(function(e){if(!e)return u("idle"),null;O={},y={},M=e.c,g=e.h,u("prepare");var n=new Promise(function(e,n){m={resolve:e,reject:n}});f={};return k(0),"prepare"===p&&0===v&&0===h&&E(),n});var n}function k(e){M[e]?(O[e]=!0,h++,function(e){var n=document.getElementsByTagName("head")[0],o=document.createElement("script");o.charset="utf-8",o.src=_.p+""+e+"."+i+".hot-update.js",n.appendChild(o)}(e)):y[e]=!0}function E(){u("ready");var e=m;if(m=null,e)if(t)Promise.resolve().then(function(){return L(t)}).then(function(n){e.resolve(n)},function(n){e.reject(n)});else{var n=[];for(var o in f)Object.prototype.hasOwnProperty.call(f,o)&&n.push(I(o));e.resolve(n)}}function L(n){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var o,t,a,s,c;function d(e){for(var n=[e],o={},t=n.slice().map(function(e){return{chain:[e],id:e}});t.length>0;){var i=t.pop(),a=i.id,r=i.chain;if((s=b[a])&&!s.hot._selfAccepted){if(s.hot._selfDeclined)return{type:"self-declined",chain:r,moduleId:a};if(s.hot._main)return{type:"unaccepted",chain:r,moduleId:a};for(var l=0;l<s.parents.length;l++){var c=s.parents[l],d=b[c];if(d){if(d.hot._declinedDependencies[a])return{type:"declined",chain:r.concat([c]),moduleId:a,parentId:c};-1===n.indexOf(c)&&(d.hot._acceptedDependencies[a]?(o[c]||(o[c]=[]),m(o[c],[a])):(delete o[c],n.push(c),t.push({chain:r.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:o}}function m(e,n){for(var o=0;o<n.length;o++){var t=n[o];-1===e.indexOf(t)&&e.push(t)}}n=n||{};var h={},v=[],y={},O=function(){console.warn("[HMR] unexpected require("+k.moduleId+") to disposed module")};for(var T in f)if(Object.prototype.hasOwnProperty.call(f,T)){var k;c=I(T);var E=!1,L=!1,S=!1,A="";switch((k=f[T]?d(c):{type:"disposed",moduleId:T}).chain&&(A="\nUpdate propagation: "+k.chain.join(" -> ")),k.type){case"self-declined":n.onDeclined&&n.onDeclined(k),n.ignoreDeclined||(E=new Error("Aborted because of self decline: "+k.moduleId+A));break;case"declined":n.onDeclined&&n.onDeclined(k),n.ignoreDeclined||(E=new Error("Aborted because of declined dependency: "+k.moduleId+" in "+k.parentId+A));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(k),n.ignoreUnaccepted||(E=new Error("Aborted because "+c+" is not accepted"+A));break;case"accepted":n.onAccepted&&n.onAccepted(k),L=!0;break;case"disposed":n.onDisposed&&n.onDisposed(k),S=!0;break;default:throw new Error("Unexception type "+k.type)}if(E)return u("abort"),Promise.reject(E);if(L)for(c in y[c]=f[c],m(v,k.outdatedModules),k.outdatedDependencies)Object.prototype.hasOwnProperty.call(k.outdatedDependencies,c)&&(h[c]||(h[c]=[]),m(h[c],k.outdatedDependencies[c]));S&&(m(v,[k.moduleId]),y[c]=O)}var D,j=[];for(t=0;t<v.length;t++)c=v[t],b[c]&&b[c].hot._selfAccepted&&j.push({module:c,errorHandler:b[c].hot._selfAccepted});u("dispose"),Object.keys(M).forEach(function(e){!1===M[e]&&function(e){delete installedChunks[e]}(e)});for(var N,C,w=v.slice();w.length>0;)if(c=w.pop(),s=b[c]){var x={},H=s.hot._disposeHandlers;for(a=0;a<H.length;a++)(o=H[a])(x);for(r[c]=x,s.hot.active=!1,delete b[c],delete h[c],a=0;a<s.children.length;a++){var R=b[s.children[a]];R&&((D=R.parents.indexOf(c))>=0&&R.parents.splice(D,1))}}for(c in h)if(Object.prototype.hasOwnProperty.call(h,c)&&(s=b[c]))for(C=h[c],a=0;a<C.length;a++)N=C[a],(D=s.children.indexOf(N))>=0&&s.children.splice(D,1);for(c in u("apply"),i=g,y)Object.prototype.hasOwnProperty.call(y,c)&&(e[c]=y[c]);var z=null;for(c in h)if(Object.prototype.hasOwnProperty.call(h,c)&&(s=b[c])){C=h[c];var B=[];for(t=0;t<C.length;t++)if(N=C[t],o=s.hot._acceptedDependencies[N]){if(-1!==B.indexOf(o))continue;B.push(o)}for(t=0;t<B.length;t++){o=B[t];try{o(C)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:c,dependencyId:C[t],error:e}),n.ignoreErrored||z||(z=e)}}}for(t=0;t<j.length;t++){var P=j[t];c=P.module,l=[c];try{_(c)}catch(e){if("function"==typeof P.errorHandler)try{P.errorHandler(e)}catch(o){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:c,error:o,originalError:e}),n.ignoreErrored||z||(z=o),z||(z=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:c,error:e}),n.ignoreErrored||z||(z=e)}}return z?(u("fail"),Promise.reject(z)):(u("idle"),new Promise(function(e){e(v)}))}var b={};function _(n){if(b[n])return b[n].exports;var t=b[n]={i:n,l:!1,exports:{},hot:function(e){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:o!==e,active:!0,accept:function(e,o){if(void 0===e)n._selfAccepted=!0;else if("function"==typeof e)n._selfAccepted=e;else if("object"==typeof e)for(var t=0;t<e.length;t++)n._acceptedDependencies[e[t]]=o||function(){};else n._acceptedDependencies[e]=o||function(){}},decline:function(e){if(void 0===e)n._selfDeclined=!0;else if("object"==typeof e)for(var o=0;o<e.length;o++)n._declinedDependencies[e[o]]=!0;else n._declinedDependencies[e]=!0},dispose:function(e){n._disposeHandlers.push(e)},addDisposeHandler:function(e){n._disposeHandlers.push(e)},removeDisposeHandler:function(e){var o=n._disposeHandlers.indexOf(e);o>=0&&n._disposeHandlers.splice(o,1)},check:T,apply:L,status:function(e){if(!e)return p;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var n=d.indexOf(e);n>=0&&d.splice(n,1)},data:r[e]};return o=void 0,n}(n),parents:(s=l,l=[],s),children:[]};return e[n].call(t.exports,t,t.exports,c(n)),t.l=!0,t.exports}_.m=e,_.c=b,_.d=function(e,n,o){_.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},_.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},_.t=function(e,n){if(1&n&&(e=_(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(_.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var t in e)_.d(o,t,function(n){return e[n]}.bind(null,t));return o},_.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return _.d(n,"a",n),n},_.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},_.p="/build/",_.h=function(){return i},c(0)(_.s=0)}([function(e,n,o){o(1),e.exports=o(2)},function(e,n,o){"use strict";o.r(n),o.d(n,"chart_config",function(){return a});var t,i,a=[{container:"#collapsable-example",animateOnInit:!0,callback:{onToggleCollapseFinished:function(e){}},node:{collapsable:!0},levelSeparation:30,siblingSeparation:10,subTeeSeparation:15,nodeAlign:"LEFT",connectors:{type:"step",style:{stroke:"grey","stroke-width":4}},animation:{nodeAnimation:"linear ",nodeSpeed:500,connectorsAnimation:"linear",connectorsSpeed:100}},t={image:"./src/assets/image/Nataliya.jpeg",HTMLclass:"person-tile",additionalInfo:{post:"Director",projects:[{name:"Hilti",url:"#"},{name:"Rimage",url:"#"}]},text:{name:"Nataliya Siromakha",nodeAlign:"BOTTOM"}},{parent:t,image:"./src/assets/image/Nataliya.jpeg",HTMLclass:"person-tile",additionalInfo:{post:"Manager",projects:[{name:"Medavant",url:"#"},{name:"Some else",url:"#"}]},text:{name:"Iulia Izonina",nodeAlign:"BOTTOM"}},{parent:t,image:"./src/assets/image/Nataliya.jpeg",HTMLclass:"person-tile",additionalInfo:{post:"God",projects:[{name:"Sofos",url:"#"},{name:"Rimage",url:"#"}]},text:{name:"Igor Rudko",nodeAlign:"BOTTOM"},stackChildren:!0},i={parent:t,image:"./src/assets/image/Nataliya.jpeg",HTMLclass:"person-tile",additionalInfo:{post:"God",projects:[{name:"Sofos",url:"#"},{name:"Rimage",url:"#"}]},text:{name:"Nataliya Siromakha",nodeAlign:"BOTTOM"},stackChildren:!0},{parent:i,image:"./src/assets/im age/Nataliya.jpeg",HTMLclass:"person-tile",additionalInfo:{post:"God",projects:[]},text:{name:"Nataliya Siromakha",nodeAlign:"BOTTOM"},stackChildren:!0}];a.map(function(e,n){return e.HTMLid=n})},function(e,n,o){"use strict";o.r(n);o(3);function t(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function i(e,n){for(var o=0;o<n.length;o++){var t=n[o];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function a(e,n,o){return n&&i(e.prototype,n),o&&i(e,o),e}var r=[{name:"Nataliya Siromakha",par:"root",children:[],image:"https://glo-assets.globallogic.com/system/data/55495/profile/NS.jpg?1514899516",HTMLclass:"person-tile",collapsed:!0,additionalInfo:{post:"Director,EngineeringDirector,EngineeringDirector,Engineering",profileLink:"https://glo.globallogic.com/users/profile/nataliya.siromakha",projects:"MTC WFA TestSOP, Sophos"},text:{name:"Nataliya Siromakha",nodeAlign:"BOTTOM"}},{name:"Yevgenii Kolometskyi",par:"Nataliya Siromakha",children:[],image:"https://glo-assets.globallogic.com/system/data/3549/profile/51725.jpg?1312378925",HTMLclass:"person-tile",collapsed:!0,additionalInfo:{post:"Senior Manager,Engineering",projects:"LeCroy, Sophos"},text:{name:"Yevgenii Kolometskyi",nodeAlign:"BOTTOM"}},{name:"Igor Rudko",par:"Nataliya Siromakha",children:[],image:"https://glo-assets.globallogic.com/system/data/31317/profile/Igor_Rudko_(1).jpg?1450094171",HTMLclass:"person-tile",collapsed:!0,additionalInfo:{post:"Director,Engineering",projects:"LeCroy, Sophos"},text:{name:"Igor Rudko",nodeAlign:"BOTTOM"}},{name:"Denys Bratchuk",par:"Nataliya Siromakha",children:[],image:"https://glo-assets.globallogic.com/system/data/70612/profile/denys-smile.jpg?1542817746",HTMLclass:"person-tile",collapsed:!0,additionalInfo:{post:"Director,Engineering",projects:"ABC-Expense report solution"},text:{name:"Denys Bratchuk",nodeAlign:"BOTTOM"}},{name:"Viktor Matusov",par:"Nataliya Siromakha",children:[],image:"https://glo-assets.globallogic.com/system/data/20679/profile/me_wedding0.jpg?1415116319",HTMLclass:"person-tile",collapsed:!0,additionalInfo:{post:"Director,Engineering",projects:[]},text:{name:"Viktor Matusov",nodeAlign:"BOTTOM"}},{name:"Viktor Matusov child",par:"Viktor Matusov",children:[],image:"https://glo-assets.globallogic.com/system/data/20679/profile/me_wedding0.jpg?1415116319",HTMLclass:"person-tile",collapsed:!0,additionalInfo:{post:"Director,Engineering",projects:"Microsoft - Service Delivery"},text:{name:"Viktor Matusov",nodeAlign:"BOTTOM"}},{name:"Viktor Matusov child",par:"Viktor Matusov",children:[],image:"https://glo-assets.globallogic.com/system/data/20679/profile/me_wedding0.jpg?1415116319",HTMLclass:"person-tile",collapsed:!0,additionalInfo:{post:"Director,Engineering",projects:"Microsoft - Service Delivery"},text:{name:"Viktor Matusov",nodeAlign:"BOTTOM"}},{name:"Viktor Matusov child",par:"Viktor Matusov",children:[],image:"https://glo-assets.globallogic.com/system/data/20679/profile/me_wedding0.jpg?1415116319",HTMLclass:"person-tile",collapsed:!0,additionalInfo:{post:"Director,Engineering",projects:"Microsoft - Service Delivery"},text:{name:"Viktor Matusov",nodeAlign:"BOTTOM"}},{name:"Viktor Matusov child",par:"Viktor Matusov",children:[],image:"https://glo-assets.globallogic.com/system/data/20679/profile/me_wedding0.jpg?1415116319",HTMLclass:"person-tile",collapsed:!0,additionalInfo:{post:"Director,Engineering",projects:"Microsoft - Service Delivery"},text:{name:"Viktor Matusov child",nodeAlign:"BOTTOM"}},{name:"Iuliia Izonina",par:"Nataliya Siromakha",children:[],image:"https://glo-assets.globallogic.com/system/data/12081/profile/IMG_0649.jpg?1360936727",HTMLclass:"person-tile",collapsed:!0,additionalInfo:{post:"Director,Engineering",projects:"Microsoft - Service Delivery"},text:{name:"Iuliia Izonina",nodeAlign:"BOTTOM"}},{name:"Iuliia Izonina child",par:"Iuliia Izonina",children:[],image:"https://glo-assets.globallogic.com/system/data/12081/profile/IMG_0649.jpg?1360936727",HTMLclass:"person-tile",collapsed:!0,additionalInfo:{post:"Director,Engineering",projects:"Microsoft - Service Delivery"},text:{name:"Iuliia Izonina child",nodeAlign:"BOTTOM"}},{name:"Iuliia Izonina child",par:"Iuliia Izonina",children:[],image:"https://glo-assets.globallogic.com/system/data/12081/profile/IMG_0649.jpg?1360936727",HTMLclass:"person-tile",collapsed:!0,additionalInfo:{post:"Director,Engineering",projects:"Microsoft - Service Delivery"},text:{name:"Iuliia Izonina child",nodeAlign:"BOTTOM"}},{name:"Iuliia Izonina child",par:"Iuliia Izonina",children:[],image:"https://glo-assets.globallogic.com/system/data/12081/profile/IMG_0649.jpg?1360936727",HTMLclass:"person-tile",collapsed:!0,additionalInfo:{post:"Director,Engineering",projects:[{name:"Aero Development",url:"#"},{name:" Rimage",url:"#"}]},text:{name:"Iuliia Izonina child",nodeAlign:"BOTTOM"}},{name:"Iuliia Izonina child",par:"Iuliia Izonina",children:[],image:"https://glo-assets.globallogic.com/system/data/12081/profile/IMG_0649.jpg?1360936727",HTMLclass:"person-tile",collapsed:!0,additionalInfo:{post:"Director,Engineering",projects:[{name:"Aero Development",url:"#"},{name:" Rimage",url:"#"}]},text:{name:"Iuliia Izonina child",nodeAlign:"BOTTOM"}},{name:"Iuliia Izonina child",par:"Iuliia Izonina",children:[],image:"https://glo-assets.globallogic.com/system/data/12081/profile/IMG_0649.jpg?1360936727",HTMLclass:"person-tile",collapsed:!0,additionalInfo:{post:"Director,Engineering",projects:"Microsoft - Service Delivery"},text:{name:"Iuliia Izonina child",nodeAlign:"BOTTOM"}},{name:"Iuliia Izonina child",par:"Iuliia Izonina",children:[],image:"https://glo-assets.globallogic.com/system/data/12081/profile/IMG_0649.jpg?1360936727",HTMLclass:"person-tile",collapsed:!0,additionalInfo:{post:"Director,Engineering",projects:"Aero Development"},text:{name:"Iuliia Izonina child",nodeAlign:"BOTTOM"}}],l=(document.getElementsByTagName("svg"),document.querySelector("#collapsable-example")),s=document.querySelector(".close-btn"),c=(document.querySelector(".container"),document.querySelector(".modal-overlay"));var d={chart:{container:"#collapsable-example",animateOnInit:!0,callback:{onToggleCollapseFinished:function(e){}},node:{collapsable:!0},levelSeparation:120,siblingSeparation:50,subTeeSeparation:50,connectors:{type:"step",style:{stroke:"#72849a","stroke-width":2}},animation:{nodeAnimation:"linear ",nodeSpeed:500,connectorsAnimation:"linear",connectorsSpeed:100}},nodeStructure:function(){r.map(function(e,n){return e.HTMLid=n+1});for(var e=[],n=0;n<r.length;n++){for(var o=r[n],t=n;t<r.length;t++){var i=r[t];o.name===i.par&&(o.children.push(i),p(i))}e.push(o)}return e.map(function(e){e.children.length||(e.collapsed=!1)}),e[0]}()};function p(e){e.children.length}(u=0,function(){return u+=.1})();var u,m=new(function(){function e(n){t(this,e),this.modalInfo=n,this.addCancelBtnEventListener()}return a(e,[{key:"addCancelBtnEventListener",value:function(){var e=this;this.modalInfo.MODAL_CANCEL_BTN.addEventListener("click",function(){e.closeModal()})}},{key:"onPersonTileClick",value:function(e,n){this.openModal(),this.updateModalContent(e),this.setProfileLinkToModalBtn(e)}},{key:"openModal",value:function(){this.modalInfo.MODAL_HTML[0].classList.add("additional-info-modal--open"),this.modalInfo.MODAL_OVERLAY[0].classList.add("modal-overlay--open")}},{key:"updateModalContent",value:function(e){this.modalInfo.MODAL_INFO_AVATAR[0].innerHTML="<img src=".concat(e.image," alt=").concat(e.text.name,">"),this.modalInfo.MODAL_INFO_NAME[0].innerHTML=e.text.name,this.modalInfo.MODAL_INFO_POST[0].innerHTML=e.additionalInfo.post,this.modalInfo.MODAL_INFO_PROJECTS[0].innerHTML=e.additionalInfo.projects}},{key:"closeModal",value:function(){this.modalInfo.MODAL_HTML[0].classList.remove("additional-info-modal--open"),this.modalInfo.MODAL_OVERLAY[0].classList.remove("modal-overlay--open")}},{key:"setProfileLinkToModalBtn",value:function(e){this.modalInfo.MODAL_VIEW_PROFILE[0].href=e.additionalInfo.profileLink}}]),e}())({MODAL_HTML:document.getElementsByClassName("additional-info-modal"),MODAL_INFO_AVATAR:document.getElementsByClassName("image-holder"),MODAL_INFO_NAME:document.getElementsByClassName("person-name"),MODAL_INFO_POST:document.getElementsByClassName("person-post"),MODAL_INFO_PROJECTS:document.getElementsByClassName("person-projects"),MODAL_OVERLAY:document.getElementsByClassName("modal-overlay"),MODAL_CANCEL_BTN:document.querySelector(".modal-cancel-btn"),MODAL_VIEW_PROFILE:document.getElementsByClassName("modal-link-btn")});new(function(){function e(n){t(this,e),this.controls=n,this.addControlEventListener(),this.fullScreenMode=!1,this.addDocumentEventListener()}return a(e,[{key:"addControlEventListener",value:function(){var e=this;this.controls.ZOOM_CONTROLS.addEventListener("click",function(n){e.onControlClick(n.target)})}},{key:"addDocumentEventListener",value:function(){document.addEventListener("fullscreenchange",this.onToggleScreenMode),document.addEventListener("webkitfullscreenchange",this.onToggleScreenMode),document.addEventListener("mozfullscreenchange",this.onToggleScreenMode),document.addEventListener("MSFullscreenChange",this.onToggleScreenMode)}},{key:"onControlClick",value:function(e){-1!==Array.from(e.classList).indexOf("decrease-zoom")&&this.controls.ZOOM_VALUE>5&&(this.decreaseZoom(),this.controls.ZOOM_VALUE<=5?this.disableControl("decrease-zoom"):this.enableControl("increase-zoom")),-1!==Array.from(e.classList).indexOf("increase-zoom")&&this.controls.ZOOM_VALUE<=15&&(this.increaseZoom(),this.controls.ZOOM_VALUE>=15?this.disableControl("increase-zoom"):this.enableControl("decrease-zoom")),-1!==Array.from(e.classList).indexOf("fullscreen-mode")&&this.openFullScreen()}},{key:"increaseZoom",value:function(){l.style.transform="scale(".concat(++this.controls.ZOOM_VALUE/10,")")}},{key:"decreaseZoom",value:function(){l.style.transform="scale(".concat(--this.controls.ZOOM_VALUE/10,")")}},{key:"disableControl",value:function(e){switch(e){case"decrease-zoom":this.controls.DECREASE_CONTROL.classList.add("zoom-control--disabled");break;case"increase-zoom":this.controls.INCREASE_CONTROL.classList.add("zoom-control--disabled")}}},{key:"enableControl",value:function(e){switch(e){case"decrease-zoom":this.controls.DECREASE_CONTROL.classList.remove("zoom-control--disabled");break;case"increase-zoom":this.controls.INCREASE_CONTROL.classList.remove("zoom-control--disabled")}}},{key:"openFullScreen",value:function(){var e=document.querySelector(".container");e.requestFullscreen?e.requestFullscreen():e.mozRequestFullScreen?e.mozRequestFullScreen():e.webkitRequestFullScreen?(e.webkitRequestFullScreen(),console.log(e.webkitRequestFullScreen)):e.msRequestFullscreen&&e.msRequestFullscreen(),this.fullScreenMode||(document.exitFullscreen?document.exitFullscreen():document.webkitExitFullscreen?document.webkitExitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.msExitFullscreen&&document.msExitFullscreen())}},{key:"onToggleScreenMode",value:function(){this.fullScreenMode=!this.fullScreenMode}}]),e}())({ZOOM_CONTROLS:document.querySelector(".zoom-controls"),DECREASE_CONTROL:document.querySelector(".decrease-zoom"),INCREASE_CONTROL:document.querySelector(".increase-zoom"),ZOOM_VALUE:10});l.addEventListener("click",function(e){-1!==Array.from(e.target.classList).indexOf("node")&&function(e){var n=r.find(function(n){return n.HTMLid==e.target.id});m.onPersonTileClick(n,e)}(e)}),s.addEventListener("click",function(e){m.closeModal(e)}),c.addEventListener("click",function(e){m.closeModal(e)}),new Treant(d);var f=[{name:"Inna Dukhota",avatar:"https://glo-assets.globallogic.com/system/data/23822/profile/402888.jpg?1423785644",divisionName:"Talent Aquisition Group ",profileLink:"https://glo.globallogic.com/users/profile/inna.dukhota"},{name:"Anna Veselova",avatar:"https://glo-assets.globallogic.com/system/data/65815/profile/IMG_7129.JPG?1534766416",divisionName:"Resourcing ",profileLink:"https://glo.globallogic.com/users/profile/anna.veselova"},{name:"Ellina Medynska ",avatar:"https://glo-assets.globallogic.com/system/data/48745/profile/IMG_9350.jpg?1498201664",divisionName:"PR & Marketing",profileLink:"https://glo.globallogic.com/users/profile/ellina.medynska"},{name:"Sergii Shmatko",avatar:"https://glo-assets.globallogic.com/system/data/60956/profile/Serhii_Shmatko.jpg?1526999529",divisionName:"IT Infrastructure",profileLink:"https://glo.globallogic.com/users/profile/serhii.shmatko"},{name:"Vladyslav Domin",avatar:"https://glo-assets.globallogic.com/system/data/51449/profile/Vladyslav_Domin.jpg?1504697687",divisionName:"Employee Services ",profileLink:"https://glo.globallogic.com/users/profile/vladyslav.domin"},{name:"Nataliya Osipenko",avatar:"https://glo-assets.globallogic.com/system/data/41292/profile/IMG_9556.jpg?1478695541",divisionName:"Process Management (PMG)",profileLink:"https://glo.globallogic.com/users/profile/nataliia.osypenko"},{name:"TBD",avatar:"",divisionName:"Business Partner ",profileLink:""}];new(function(){function e(n){t(this,e),this.divisionsInfo=n,console.log(this.divisionsInfo),this.setDataTile()}return a(e,[{key:"setDataTile",value:function(){var e=this;f.forEach(function(n){var o=document.createElement("div");o.className="divisions_heads tile-wrapper",o.innerHTML='\n         <div class="person-tile division-head-tile">\n           <a href="'.concat(n.profileLink,'" target="_blank" class="profile-link">\n             <div class="tile-image-holder division-head__image-holder">\n                  ').concat(e.onCheckImage(n),'\n               </div>\n              <p class="node-name division-head__name">').concat(n.name,'</p>\n              <p class="node-name division-head__description">').concat(n.divisionName,"</p>\n            </a>\n         </div>"),e.divisionsInfo.DIVISIONS_HEADS_CONTAINER[0].appendChild(o)})}},{key:"onCheckImage",value:function(e){return e.avatar?"<img src=".concat(e.avatar," alt=").concat(e.name,">"):'<span class="empty-image-state"><span>'}}]),e}())({DIVISIONS_HEADS_CONTAINER:document.getElementsByClassName("division-heads"),DIVISIONS_HEADS:f})},function(e,n,o){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbW9kdWxlcy9jaGFydC1jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbW9kdWxlcy9pbmRleC5qcyJdLCJuYW1lcyI6WyJwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayIsIndpbmRvdyIsImNodW5rSWQiLCJtb3JlTW9kdWxlcyIsImhvdEF2YWlsYWJsZUZpbGVzTWFwIiwiaG90UmVxdWVzdGVkRmlsZXNNYXAiLCJtb2R1bGVJZCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImhvdFVwZGF0ZSIsImhvdFdhaXRpbmdGaWxlcyIsImhvdENodW5rc0xvYWRpbmciLCJob3RVcGRhdGVEb3dubG9hZGVkIiwiaG90QWRkVXBkYXRlQ2h1bmsiLCJob3RDdXJyZW50Q2hpbGRNb2R1bGUiLCJob3RBcHBseU9uVXBkYXRlIiwiaG90Q3VycmVudEhhc2giLCJob3RSZXF1ZXN0VGltZW91dCIsImhvdEN1cnJlbnRNb2R1bGVEYXRhIiwiaG90Q3VycmVudFBhcmVudHMiLCJob3RDdXJyZW50UGFyZW50c1RlbXAiLCJob3RDcmVhdGVSZXF1aXJlIiwibWUiLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImZuIiwicmVxdWVzdCIsImhvdCIsImFjdGl2ZSIsInBhcmVudHMiLCJpbmRleE9mIiwicHVzaCIsImNoaWxkcmVuIiwiY29uc29sZSIsIndhcm4iLCJPYmplY3RGYWN0b3J5IiwibmFtZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZXQiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiZSIsImhvdFN0YXR1cyIsImhvdFNldFN0YXR1cyIsInRoZW4iLCJmaW5pc2hDaHVua0xvYWRpbmciLCJlcnIiLCJob3RXYWl0aW5nRmlsZXNNYXAiLCJob3RFbnN1cmVVcGRhdGVDaHVuayIsInQiLCJtb2RlIiwiaG90U3RhdHVzSGFuZGxlcnMiLCJuZXdTdGF0dXMiLCJpIiwibGVuZ3RoIiwiaG90RGVmZXJyZWQiLCJob3RVcGRhdGVOZXdIYXNoIiwidG9Nb2R1bGVJZCIsImlkIiwiaG90Q2hlY2siLCJhcHBseSIsIkVycm9yIiwicmVxdWVzdFRpbWVvdXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIlhNTEh0dHBSZXF1ZXN0IiwicmVxdWVzdFBhdGgiLCJwIiwib3BlbiIsInRpbWVvdXQiLCJzZW5kIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInVwZGF0ZSIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsImMiLCJoIiwicHJvbWlzZSIsImhlYWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsImNoYXJzZXQiLCJzcmMiLCJhcHBlbmRDaGlsZCIsImhvdERvd25sb2FkVXBkYXRlQ2h1bmsiLCJkZWZlcnJlZCIsImhvdEFwcGx5IiwicmVzdWx0Iiwib3V0ZGF0ZWRNb2R1bGVzIiwib3B0aW9ucyIsImNiIiwiaiIsIm1vZHVsZSIsImdldEFmZmVjdGVkU3R1ZmYiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJzbGljZSIsIm1hcCIsImNoYWluIiwicXVldWVJdGVtIiwicG9wIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJ0eXBlIiwiX21haW4iLCJwYXJlbnRJZCIsInBhcmVudCIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsImNvbmNhdCIsIl9hY2NlcHRlZERlcGVuZGVuY2llcyIsImFkZEFsbFRvU2V0IiwiYSIsImIiLCJpdGVtIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsImFib3J0RXJyb3IiLCJkb0FwcGx5IiwiZG9EaXNwb3NlIiwiY2hhaW5JbmZvIiwiam9pbiIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsImlkeCIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImVycm9ySGFuZGxlciIsImtleXMiLCJmb3JFYWNoIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG90RGlzcG9zZUNodW5rIiwiZGVwZW5kZW5jeSIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwiZGF0YSIsImRpc3Bvc2VIYW5kbGVycyIsIl9kaXNwb3NlSGFuZGxlcnMiLCJjaGlsZCIsInNwbGljZSIsIm1vZHVsZXMiLCJlcnJvciIsImNhbGxiYWNrcyIsIm9uRXJyb3JlZCIsImRlcGVuZGVuY3lJZCIsImlnbm9yZUVycm9yZWQiLCJlcnIyIiwib3JpZ2luYWxFcnJvciIsImV4cG9ydHMiLCJsIiwiYWNjZXB0IiwiZGVwIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJkZWNsaW5lIiwiZGlzcG9zZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJjaGVjayIsImFkZFN0YXR1c0hhbmRsZXIiLCJyZW1vdmVTdGF0dXNIYW5kbGVyIiwiaG90Q3JlYXRlTW9kdWxlIiwibSIsImQiLCJnZXR0ZXIiLCJvIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiY2hhcnRfY29uZmlnIiwicGFyZW50X24iLCJjaF8zIiwiY29udGFpbmVyIiwiYW5pbWF0ZU9uSW5pdCIsIm9uVG9nZ2xlQ29sbGFwc2VGaW5pc2hlZCIsIm5vZGUiLCJjb2xsYXBzYWJsZSIsImxldmVsU2VwYXJhdGlvbiIsInNpYmxpbmdTZXBhcmF0aW9uIiwic3ViVGVlU2VwYXJhdGlvbiIsIm5vZGVBbGlnbiIsImNvbm5lY3RvcnMiLCJzdHlsZSIsInN0cm9rZSIsInN0cm9rZS13aWR0aCIsImFuaW1hdGlvbiIsIm5vZGVBbmltYXRpb24iLCJub2RlU3BlZWQiLCJjb25uZWN0b3JzQW5pbWF0aW9uIiwiY29ubmVjdG9yc1NwZWVkIiwiaW1hZ2UiLCJIVE1MY2xhc3MiLCJhZGRpdGlvbmFsSW5mbyIsInBvc3QiLCJwcm9qZWN0cyIsInVybCIsInRleHQiLCJzdGFja0NoaWxkcmVuIiwiZWwiLCJpbmQiLCJIVE1MaWQiLCJwZXJzb25zIiwicGFyIiwiY29sbGFwc2VkIiwicHJvZmlsZUxpbmsiLCJ3cmFwcGVyIiwicXVlcnlTZWxlY3RvciIsImNsb3NlQnV0dG9uIiwibW9kYWxPdmVybGF5IiwiY2hhcnQiLCJub2RlU3RydWN0dXJlIiwic29ydGVkTm9kZXMiLCJlbGVtZW50IiwiZWxlbWVudDIiLCJzaG93SGlkZUNvbGxhcHNlZCIsImNvbWJpbmVOZXN0ZWROb2RlcyIsInNjYWxlIiwibW9kYWwiLCJNb2RhbCIsIm1vZGFsSW5mbyIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJhZGRDYW5jZWxCdG5FdmVudExpc3RlbmVyIiwiX3RoaXMiLCJNT0RBTF9DQU5DRUxfQlROIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsb3NlTW9kYWwiLCJzZWxlY3RlZEVsZW1lbnQiLCJldmVudCIsIm9wZW5Nb2RhbCIsInVwZGF0ZU1vZGFsQ29udGVudCIsInNldFByb2ZpbGVMaW5rVG9Nb2RhbEJ0biIsIk1PREFMX0hUTUwiLCJjbGFzc0xpc3QiLCJhZGQiLCJNT0RBTF9PVkVSTEFZIiwiTU9EQUxfSU5GT19BVkFUQVIiLCJpbm5lckhUTUwiLCJNT0RBTF9JTkZPX05BTUUiLCJNT0RBTF9JTkZPX1BPU1QiLCJNT0RBTF9JTkZPX1BST0pFQ1RTIiwicmVtb3ZlIiwiTU9EQUxfVklFV19QUk9GSUxFIiwiaHJlZiIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJab29tIiwiY29udHJvbHMiLCJhZGRDb250cm9sRXZlbnRMaXN0ZW5lciIsImZ1bGxTY3JlZW5Nb2RlIiwiYWRkRG9jdW1lbnRFdmVudExpc3RlbmVyIiwiX3RoaXMyIiwiWk9PTV9DT05UUk9MUyIsIm9uQ29udHJvbENsaWNrIiwidGFyZ2V0Iiwib25Ub2dnbGVTY3JlZW5Nb2RlIiwiY29udHJvbEluZm8iLCJBcnJheSIsImZyb20iLCJaT09NX1ZBTFVFIiwiZGVjcmVhc2Vab29tIiwiZGlzYWJsZUNvbnRyb2wiLCJlbmFibGVDb250cm9sIiwiaW5jcmVhc2Vab29tIiwib3BlbkZ1bGxTY3JlZW4iLCJ0cmFuc2Zvcm0iLCJkaXNhYmxlZEJ0biIsIkRFQ1JFQVNFX0NPTlRST0wiLCJJTkNSRUFTRV9DT05UUk9MIiwiZW5hYmxlZEJ0biIsImVsZW0iLCJyZXF1ZXN0RnVsbHNjcmVlbiIsIm1velJlcXVlc3RGdWxsU2NyZWVuIiwid2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4iLCJsb2ciLCJtc1JlcXVlc3RGdWxsc2NyZWVuIiwiZXhpdEZ1bGxzY3JlZW4iLCJ3ZWJraXRFeGl0RnVsbHNjcmVlbiIsIm1vekNhbmNlbEZ1bGxTY3JlZW4iLCJtc0V4aXRGdWxsc2NyZWVuIiwiZmluZCIsIm9uUGVyc29uVGlsZUNsaWNrIiwiZ2V0QWRkaXRpb25hbEluZm8iLCJUcmVhbnQiLCJoZWFkc09mRGl2aXNpb25zIiwiYXZhdGFyIiwiZGl2aXNpb25OYW1lIiwiRnVuY3Rpb25hbERpdmlzaW9uc0hlYWRzIiwiZGl2aXNpb25zSW5mbyIsInNldERhdGFUaWxlIiwiX3RoaXMzIiwidGlsZSIsImNsYXNzTmFtZSIsIm9uQ2hlY2tJbWFnZSIsIkRJVklTSU9OU19IRUFEU19DT05UQUlORVIiLCJESVZJU0lPTlNfSEVBRFMiXSwibWFwcGluZ3MiOiJhQUdBLElBQUFBLEVBQUFDLE9BQUEsaUJBQ0FBLE9BQUEsaUJBQ0EsU0FBQUMsRUFBQUMsSUFpUkEsU0FBQUQsRUFBQUMsR0FDQSxJQUFBQyxFQUFBRixLQUFBRyxFQUFBSCxHQUNBLE9BRUEsUUFBQUksS0FEQUQsRUFBQUgsSUFBQSxFQUNBQyxFQUNBSSxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBUCxFQUFBRyxL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QUF1QixrQkFDM0RrRCxnQkFBaUJYIiwiZmlsZSI6ImluZGV4LmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdGZ1bmN0aW9uIGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKSB7XG4gXHRcdGRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHR9XG4gXHR2YXIgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2sgPSB3aW5kb3dbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdO1xuIFx0d2luZG93W1wid2VicGFja0hvdFVwZGF0ZVwiXSA9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gd2VicGFja0hvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcbiBcdFx0aWYgKHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKSBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHR9IDtcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0dmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07XG4gXHRcdHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuIFx0XHRzY3JpcHQuY2hhcnNldCA9IFwidXRmLThcIjtcbiBcdFx0c2NyaXB0LnNyYyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNcIjtcbiBcdFx0aWYgKG51bGwpIHNjcmlwdC5jcm9zc09yaWdpbiA9IG51bGw7XG4gXHRcdGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZE1hbmlmZXN0KHJlcXVlc3RUaW1lb3V0KSB7XG4gXHRcdHJlcXVlc3RUaW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQgfHwgMTAwMDA7XG4gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydFwiKSk7XG4gXHRcdFx0fVxuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuIFx0XHRcdFx0dmFyIHJlcXVlc3RQYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc29uXCI7XG4gXHRcdFx0XHRyZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgcmVxdWVzdFBhdGgsIHRydWUpO1xuIFx0XHRcdFx0cmVxdWVzdC50aW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQ7XG4gXHRcdFx0XHRyZXF1ZXN0LnNlbmQobnVsbCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KGVycik7XG4gXHRcdFx0fVxuIFx0XHRcdHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm47XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5zdGF0dXMgPT09IDApIHtcbiBcdFx0XHRcdFx0Ly8gdGltZW91dFxuIFx0XHRcdFx0XHRyZWplY3QoXG4gXHRcdFx0XHRcdFx0bmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgdGltZWQgb3V0LlwiKVxuIFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gNDA0KSB7XG4gXHRcdFx0XHRcdC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcbiBcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyAhPT0gMjAwICYmIHJlcXVlc3Quc3RhdHVzICE9PSAzMDQpIHtcbiBcdFx0XHRcdFx0Ly8gb3RoZXIgZmFpbHVyZVxuIFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgZmFpbGVkLlwiKSk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHQvLyBzdWNjZXNzXG4gXHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0dmFyIHVwZGF0ZSA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG4gXHRcdFx0XHRcdFx0cmVqZWN0KGUpO1xuIFx0XHRcdFx0XHRcdHJldHVybjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRyZXNvbHZlKHVwZGF0ZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdHZhciBob3RBcHBseU9uVXBkYXRlID0gdHJ1ZTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRIYXNoID0gXCIwOTVhMmFhZjYwYjhkMmU2YTk3NFwiO1xuIFx0dmFyIGhvdFJlcXVlc3RUaW1lb3V0ID0gMTAwMDA7XG4gXHR2YXIgaG90Q3VycmVudE1vZHVsZURhdGEgPSB7fTtcbiBcdHZhciBob3RDdXJyZW50Q2hpbGRNb2R1bGU7XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHNUZW1wID0gW107XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkge1xuIFx0XHR2YXIgbWUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0aWYgKCFtZSkgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX187XG4gXHRcdHZhciBmbiA9IGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiBcdFx0XHRpZiAobWUuaG90LmFjdGl2ZSkge1xuIFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcbiBcdFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA9PT0gLTEpIHtcbiBcdFx0XHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMucHVzaChtb2R1bGVJZCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpID09PSAtMSkge1xuIFx0XHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRjb25zb2xlLndhcm4oXG4gXHRcdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICtcbiBcdFx0XHRcdFx0XHRyZXF1ZXN0ICtcbiBcdFx0XHRcdFx0XHRcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgK1xuIFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHQpO1xuIFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbXTtcbiBcdFx0XHR9XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18ocmVxdWVzdCk7XG4gXHRcdH07XG4gXHRcdHZhciBPYmplY3RGYWN0b3J5ID0gZnVuY3Rpb24gT2JqZWN0RmFjdG9yeShuYW1lKSB7XG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXTtcbiBcdFx0XHRcdH0sXG4gXHRcdFx0XHRzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX19bbmFtZV0gPSB2YWx1ZTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9O1xuIFx0XHR9O1xuIFx0XHRmb3IgKHZhciBuYW1lIGluIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX193ZWJwYWNrX3JlcXVpcmVfXywgbmFtZSkgJiZcbiBcdFx0XHRcdG5hbWUgIT09IFwiZVwiICYmXG4gXHRcdFx0XHRuYW1lICE9PSBcInRcIlxuIFx0XHRcdCkge1xuIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBPYmplY3RGYWN0b3J5KG5hbWUpKTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0Zm4uZSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInJlYWR5XCIpIGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0aG90Q2h1bmtzTG9hZGluZysrO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoY2h1bmtJZCkudGhlbihmaW5pc2hDaHVua0xvYWRpbmcsIGZ1bmN0aW9uKGVycikge1xuIFx0XHRcdFx0ZmluaXNoQ2h1bmtMb2FkaW5nKCk7XG4gXHRcdFx0XHR0aHJvdyBlcnI7XG4gXHRcdFx0fSk7XG5cbiBcdFx0XHRmdW5jdGlvbiBmaW5pc2hDaHVua0xvYWRpbmcoKSB7XG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nLS07XG4gXHRcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInByZXBhcmVcIikge1xuIFx0XHRcdFx0XHRpZiAoIWhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmIChob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xuIFx0XHRcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fTtcbiBcdFx0Zm4udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdFx0aWYgKG1vZGUgJiAxKSB2YWx1ZSA9IGZuKHZhbHVlKTtcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy50KHZhbHVlLCBtb2RlICYgfjEpO1xuIFx0XHR9O1xuIFx0XHRyZXR1cm4gZm47XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBob3QgPSB7XG4gXHRcdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuIFx0XHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXG4gXHRcdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcbiBcdFx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcbiBcdFx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcbiBcdFx0XHRfbWFpbjogaG90Q3VycmVudENoaWxkTW9kdWxlICE9PSBtb2R1bGVJZCxcblxuIFx0XHRcdC8vIE1vZHVsZSBBUElcbiBcdFx0XHRhY3RpdmU6IHRydWUsXG4gXHRcdFx0YWNjZXB0OiBmdW5jdGlvbihkZXAsIGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxuIFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcbiBcdFx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xuIFx0XHRcdFx0ZWxzZSBob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcF0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xuIFx0XHRcdH0sXG4gXHRcdFx0ZGVjbGluZTogZnVuY3Rpb24oZGVwKSB7XG4gXHRcdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XG4gXHRcdFx0fSxcbiBcdFx0XHRkaXNwb3NlOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuIFx0XHRcdGNoZWNrOiBob3RDaGVjayxcbiBcdFx0XHRhcHBseTogaG90QXBwbHksXG4gXHRcdFx0c3RhdHVzOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRpZiAoIWwpIHJldHVybiBob3RTdGF0dXM7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3RTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3RTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly9pbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXG4gXHRcdFx0ZGF0YTogaG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXG4gXHRcdH07XG4gXHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDtcbiBcdFx0cmV0dXJuIGhvdDtcbiBcdH1cblxuIFx0dmFyIGhvdFN0YXR1c0hhbmRsZXJzID0gW107XG4gXHR2YXIgaG90U3RhdHVzID0gXCJpZGxlXCI7XG5cbiBcdGZ1bmN0aW9uIGhvdFNldFN0YXR1cyhuZXdTdGF0dXMpIHtcbiBcdFx0aG90U3RhdHVzID0gbmV3U3RhdHVzO1xuIFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGhvdFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuIFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcbiBcdH1cblxuIFx0Ly8gd2hpbGUgZG93bmxvYWRpbmdcbiBcdHZhciBob3RXYWl0aW5nRmlsZXMgPSAwO1xuIFx0dmFyIGhvdENodW5rc0xvYWRpbmcgPSAwO1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90QXZhaWxhYmxlRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3REZWZlcnJlZDtcblxuIFx0Ly8gVGhlIHVwZGF0ZSBpbmZvXG4gXHR2YXIgaG90VXBkYXRlLCBob3RVcGRhdGVOZXdIYXNoO1xuXG4gXHRmdW5jdGlvbiB0b01vZHVsZUlkKGlkKSB7XG4gXHRcdHZhciBpc051bWJlciA9ICtpZCArIFwiXCIgPT09IGlkO1xuIFx0XHRyZXR1cm4gaXNOdW1iZXIgPyAraWQgOiBpZDtcbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90Q2hlY2soYXBwbHkpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJpZGxlXCIpIHtcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcbiBcdFx0fVxuIFx0XHRob3RBcHBseU9uVXBkYXRlID0gYXBwbHk7XG4gXHRcdGhvdFNldFN0YXR1cyhcImNoZWNrXCIpO1xuIFx0XHRyZXR1cm4gaG90RG93bmxvYWRNYW5pZmVzdChob3RSZXF1ZXN0VGltZW91dCkudGhlbihmdW5jdGlvbih1cGRhdGUpIHtcbiBcdFx0XHRpZiAoIXVwZGF0ZSkge1xuIFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbiBcdFx0XHRcdHJldHVybiBudWxsO1xuIFx0XHRcdH1cbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGhvdEF2YWlsYWJsZUZpbGVzTWFwID0gdXBkYXRlLmM7XG4gXHRcdFx0aG90VXBkYXRlTmV3SGFzaCA9IHVwZGF0ZS5oO1xuXG4gXHRcdFx0aG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdFx0aG90RGVmZXJyZWQgPSB7XG4gXHRcdFx0XHRcdHJlc29sdmU6IHJlc29sdmUsXG4gXHRcdFx0XHRcdHJlamVjdDogcmVqZWN0XG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdGhvdFVwZGF0ZSA9IHt9O1xuIFx0XHRcdHZhciBjaHVua0lkID0gMDtcbiBcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcbiBcdFx0XHR7XG4gXHRcdFx0XHQvKmdsb2JhbHMgY2h1bmtJZCAqL1xuIFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHRcdGlmIChcbiBcdFx0XHRcdGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIgJiZcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiZcbiBcdFx0XHRcdGhvdFdhaXRpbmdGaWxlcyA9PT0gMFxuIFx0XHRcdCkge1xuIFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gcHJvbWlzZTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHtcbiBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSB8fCAhaG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0pXG4gXHRcdFx0cmV0dXJuO1xuIFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IGZhbHNlO1xuIFx0XHRmb3IgKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0aG90VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYgKC0taG90V2FpdGluZ0ZpbGVzID09PSAwICYmIGhvdENodW5rc0xvYWRpbmcgPT09IDApIHtcbiBcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdKSB7XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzKys7XG4gXHRcdFx0aG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RVcGRhdGVEb3dubG9hZGVkKCkge1xuIFx0XHRob3RTZXRTdGF0dXMoXCJyZWFkeVwiKTtcbiBcdFx0dmFyIGRlZmVycmVkID0gaG90RGVmZXJyZWQ7XG4gXHRcdGhvdERlZmVycmVkID0gbnVsbDtcbiBcdFx0aWYgKCFkZWZlcnJlZCkgcmV0dXJuO1xuIFx0XHRpZiAoaG90QXBwbHlPblVwZGF0ZSkge1xuIFx0XHRcdC8vIFdyYXAgZGVmZXJyZWQgb2JqZWN0IGluIFByb21pc2UgdG8gbWFyayBpdCBhcyBhIHdlbGwtaGFuZGxlZCBQcm9taXNlIHRvXG4gXHRcdFx0Ly8gYXZvaWQgdHJpZ2dlcmluZyB1bmNhdWdodCBleGNlcHRpb24gd2FybmluZyBpbiBDaHJvbWUuXG4gXHRcdFx0Ly8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ2NTY2NlxuIFx0XHRcdFByb21pc2UucmVzb2x2ZSgpXG4gXHRcdFx0XHQudGhlbihmdW5jdGlvbigpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIGhvdEFwcGx5KGhvdEFwcGx5T25VcGRhdGUpO1xuIFx0XHRcdFx0fSlcbiBcdFx0XHRcdC50aGVuKFxuIFx0XHRcdFx0XHRmdW5jdGlvbihyZXN1bHQpIHtcbiBcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCk7XG4gXHRcdFx0XHRcdH0sXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKGVycikge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdChlcnIpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHQpO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0XHRmb3IgKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbiBcdFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2godG9Nb2R1bGVJZChpZCkpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykge1xuIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcInJlYWR5XCIpXG4gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiYXBwbHkoKSBpcyBvbmx5IGFsbG93ZWQgaW4gcmVhZHkgc3RhdHVzXCIpO1xuIFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuIFx0XHR2YXIgY2I7XG4gXHRcdHZhciBpO1xuIFx0XHR2YXIgajtcbiBcdFx0dmFyIG1vZHVsZTtcbiBcdFx0dmFyIG1vZHVsZUlkO1xuXG4gXHRcdGZ1bmN0aW9uIGdldEFmZmVjdGVkU3R1ZmYodXBkYXRlTW9kdWxlSWQpIHtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW3VwZGF0ZU1vZHVsZUlkXTtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblxuIFx0XHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpLm1hcChmdW5jdGlvbihpZCkge1xuIFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0Y2hhaW46IFtpZF0sXG4gXHRcdFx0XHRcdGlkOiBpZFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xuIFx0XHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAoIW1vZHVsZSB8fCBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudCA9IGluc3RhbGxlZE1vZHVsZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRpZiAoIXBhcmVudCkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHRcdH07XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG4gXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcbiBcdFx0XHRcdFx0cXVldWUucHVzaCh7XG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRpZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuXG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcbiBcdFx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcbiBcdFx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuIFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG4gXHRcdFx0fTtcbiBcdFx0fVxuXG4gXHRcdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcbiBcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdHZhciBpdGVtID0gYltpXTtcbiBcdFx0XHRcdGlmIChhLmluZGV4T2YoaXRlbSkgPT09IC0xKSBhLnB1c2goaXRlbSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcbiBcdFx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuIFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcbiBcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuXG4gXHRcdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUoKSB7XG4gXHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyByZXN1bHQubW9kdWxlSWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCJcbiBcdFx0XHQpO1xuIFx0XHR9O1xuXG4gXHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdG1vZHVsZUlkID0gdG9Nb2R1bGVJZChpZCk7XG4gXHRcdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG4gXHRcdFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRcdFx0aWYgKGhvdFVwZGF0ZVtpZF0pIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGVJZCk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBpZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cbiBcdFx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG4gXHRcdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG4gXHRcdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcbiBcdFx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGRlZmF1bHQ6XG4gXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG4gXHRcdFx0XHRcdGhvdFNldFN0YXR1cyhcImFib3J0XCIpO1xuIFx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoYWJvcnRFcnJvcik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoZG9BcHBseSkge1xuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IGhvdFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdFx0XHRcdGZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0XHRcdFx0aWYgKFxuIFx0XHRcdFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHRcdFx0XHQpXG4gXHRcdFx0XHRcdFx0KSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG4gXHRcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuIFx0XHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRtb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSAmJlxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWRcbiBcdFx0XHQpXG4gXHRcdFx0XHRvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMucHVzaCh7XG4gXHRcdFx0XHRcdG1vZHVsZTogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdGVycm9ySGFuZGxlcjogaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWRcbiBcdFx0XHRcdH0pO1xuIFx0XHR9XG5cbiBcdFx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImRpc3Bvc2VcIik7XG4gXHRcdE9iamVjdC5rZXlzKGhvdEF2YWlsYWJsZUZpbGVzTWFwKS5mb3JFYWNoKGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gPT09IGZhbHNlKSB7XG4gXHRcdFx0XHRob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHR9KTtcblxuIFx0XHR2YXIgaWR4O1xuIFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcbiBcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiBcdFx0XHRtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdGlmICghbW9kdWxlKSBjb250aW51ZTtcblxuIFx0XHRcdHZhciBkYXRhID0ge307XG5cbiBcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcbiBcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdGNiID0gZGlzcG9zZUhhbmRsZXJzW2pdO1xuIFx0XHRcdFx0Y2IoZGF0YSk7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXSA9IGRhdGE7XG5cbiBcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuIFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cbiBcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcbiBcdFx0XHRkZWxldGUgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG4gXHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGNoaWxkID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuIFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG4gXHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG4gXHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cbiBcdFx0dmFyIGRlcGVuZGVuY3k7XG4gXHRcdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcbiBcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcbiBcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIE5vdCBpbiBcImFwcGx5XCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiYXBwbHlcIik7XG5cbiBcdFx0aG90Q3VycmVudEhhc2ggPSBob3RVcGRhdGVOZXdIYXNoO1xuXG4gXHRcdC8vIGluc2VydCBuZXcgY29kZVxuIFx0XHRmb3IgKG1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFwcGxpZWRVcGRhdGUsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuIFx0XHR2YXIgZXJyb3IgPSBudWxsO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV07XG4gXHRcdFx0XHRcdFx0Y2IgPSBtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcbiBcdFx0XHRcdFx0XHRpZiAoY2IpIHtcbiBcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihjYikgIT09IC0xKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGNiKTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHRcdGNiID0gY2FsbGJhY2tzW2ldO1xuIFx0XHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0XHRjYihtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XG4gXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXSxcbiBcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcbiBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG4gXHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuIFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVycik7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcbiBcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyMjtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuIFx0XHRpZiAoZXJyb3IpIHtcbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJmYWlsXCIpO1xuIFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gXHRcdH1cblxuIFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuIFx0XHRcdHJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGhvdDogaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSxcbiBcdFx0XHRwYXJlbnRzOiAoaG90Q3VycmVudFBhcmVudHNUZW1wID0gaG90Q3VycmVudFBhcmVudHMsIGhvdEN1cnJlbnRQYXJlbnRzID0gW10sIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCksXG4gXHRcdFx0Y2hpbGRyZW46IFtdXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9idWlsZC9cIjtcblxuIFx0Ly8gX193ZWJwYWNrX2hhc2hfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5oID0gZnVuY3Rpb24oKSB7IHJldHVybiBob3RDdXJyZW50SGFzaDsgfTtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBob3RDcmVhdGVSZXF1aXJlKDApKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwibGV0IHNvbWUgPSB7XG4gIGNoYXJ0OiB7XG4gICAgY29udGFpbmVyOiBcIiNjb2xsYXBzYWJsZS1leGFtcGxlXCIsXG4gICAgYW5pbWF0ZU9uSW5pdDogdHJ1ZSxcbiAgICBjYWxsYmFjazoge1xuICAgICAgb25Ub2dnbGVDb2xsYXBzZUZpbmlzaGVkOiBmdW5jdGlvbiAoZSkge1xuLy8gICAgICAgIHNjYWxlT25Db2xsYXBzZShlLlgpO1xuICAgICAgfSxcbiAgICB9LFxuICAgIG5vZGU6IHtcbiAgICAgIGNvbGxhcHNhYmxlOiB0cnVlXG4gICAgfSxcbiAgICBsZXZlbFNlcGFyYXRpb246IDMwLFxuICAgIHNpYmxpbmdTZXBhcmF0aW9uOiAxMCxcbiAgICBzdWJUZWVTZXBhcmF0aW9uOiAxNSxcbiAgICBub2RlQWxpZ246ICdMRUZUJyxcbiAgICBjb25uZWN0b3JzOiB7XG4gICAgICB0eXBlOiAnc3RlcCcsXG4gICAgICBzdHlsZToge1xuICAgICAgICAnc3Ryb2tlJzogJ2dyZXknLFxuICAgICAgICAnc3Ryb2tlLXdpZHRoJzogNCxcbiAgICAgIH1cbiAgICB9LFxuICAgIGFuaW1hdGlvbjoge1xuICAgICAgbm9kZUFuaW1hdGlvbjogXCJsaW5lYXIgXCIsXG4gICAgICBub2RlU3BlZWQ6IDUwMCxcbiAgICAgIGNvbm5lY3RvcnNBbmltYXRpb246IFwibGluZWFyXCIsXG4gICAgICBjb25uZWN0b3JzU3BlZWQ6IDEwMFxuICAgIH1cbiAgfSxcbiAgbm9kZVN0cnVjdHVyZToge1xuICAgIGltYWdlOiBcIi4vc3JjL2Fzc2V0cy9pbWFnZS9OYXRhbGl5YS5qcGVnXCIsXG4gICAgSFRNTGNsYXNzOiAncGVyc29uLXRpbGUnLFxuLy8gICAgSFRNTGlkOiAnY2RzYycsXG4gICAgYWRkaXRpb25hbEluZm86IHt9LFxuXG4gICAgdGV4dDoge1xuICAgICAgbmFtZToge1xuXG4gICAgICAgIGhyZWY6ICdodHRwczovL3BvcnRhbC5nbG9iYWxsb2dpYy5jb20vdXNlci9wcm9maWxlL25hdGFsaXlhLnNpcm9tYWtoYS9jNzhhNzA2ZTkxMzQvZ2VuZXJhbCcsXG4gICAgICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICAgICAgfSxcbiAgICAgIG5vZGVBbGlnbjogJ0JPVFRPTScsXG4gICAgfSxcbiAgICBjaGlsZHJlbjogW1xuICAgICAge1xuICAgICAgICBpbWFnZTogXCIuL3NyYy9hc3NldHMvaW1hZ2UvTmF0YWxpeWEuanBlZ1wiLFxuICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgIHRleHQ6IHtcbiAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICB2YWw6IFwiSXVsaWEgSXpvbmluYVwiLFxuICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vcG9ydGFsLmdsb2JhbGxvZ2ljLmNvbS91c2VyL3Byb2ZpbGUvbmF0YWxpeWEuc2lyb21ha2hhL2M3OGE3MDZlOTEzNC9nZW5lcmFsJyxcbiAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4vLyAgICAgICAgc3RhY2tDaGlsZHJlbjogdHJ1ZSxcbi8vICAgICAgICBjaGlsZHJlbkRyb3BMZXZlbDogMixcbiAgICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGltYWdlOiBcIi4vc3JjL2Fzc2V0cy9pbWFnZS9OYXRhbGl5YS5qcGVnXCIsXG4gICAgICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICB2YWw6IFwiU29tZSBsb25nbmFtZWVlZWVlZVwiLFxuICAgICAgICAgICAgICAgIGhyZWY6ICdodHRwczovL3BvcnRhbC5nbG9iYWxsb2dpYy5jb20vdXNlci9wcm9maWxlL25hdGFsaXlhLnNpcm9tYWtoYS9jNzhhNzA2ZTkxMzQvZ2VuZXJhbCcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhY2tDaGlsZHJlbjogdHJ1ZSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICAgICAgICBpbWFnZTogXCIuL3NyYy9hc3NldHMvaW1hZ2UvTmF0YWxpeWEuanBlZ1wiLFxuICAgICAgICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgICB2YWw6IFwiSXVsaWEgSXpvbmluYVwiLFxuICAgICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vcG9ydGFsLmdsb2JhbGxvZ2ljLmNvbS91c2VyL3Byb2ZpbGUvbmF0YWxpeWEuc2lyb21ha2hhL2M3OGE3MDZlOTEzNC9nZW5lcmFsJyxcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4vLyAgICAgICAgc3RhY2tDaGlsZHJlbjogdHJ1ZSxcbi8vICAgICAgICBjaGlsZHJlbkRyb3BMZXZlbDogMixcbiAgICAgICAgICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGltYWdlOiBcIi4vc3JjL2Fzc2V0cy9pbWFnZS9OYXRhbGl5YS5qcGVnXCIsXG4gICAgICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICB2YWw6IFwiSXVsaWEgSXpvbmluYVwiLFxuICAgICAgICAgICAgICAgIGhyZWY6ICdodHRwczovL3BvcnRhbC5nbG9iYWxsb2dpYy5jb20vdXNlci9wcm9maWxlL25hdGFsaXlhLnNpcm9tYWtoYS9jNzhhNzA2ZTkxMzQvZ2VuZXJhbCcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhY2tDaGlsZHJlbjogdHJ1ZSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbWFnZTogXCIuL3NyYy9hc3NldHMvaW1hZ2UvTmF0YWxpeWEuanBlZ1wiLFxuICAgICAgICAgICAgICAgIEhUTUxjbGFzczogJ3BlcnNvbi10aWxlJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbDogXCJJdWxpYSBJem9uaW5hXCIsXG4gICAgICAgICAgICAgICAgICAgIGhyZWY6ICdodHRwczovL3BvcnRhbC5nbG9iYWxsb2dpYy5jb20vdXNlci9wcm9maWxlL25hdGFsaXlhLnNpcm9tYWtoYS9jNzhhNzA2ZTkxMzQvZ2VuZXJhbCcsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW1hZ2U6IFwiLi9zcmMvYXNzZXRzL2ltYWdlL05hdGFsaXlhLmpwZWdcIixcbiAgICAgICAgICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgICAgICB2YWw6IFwiSXVsaWEgSXpvbmluYVwiLFxuICAgICAgICAgICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9wb3J0YWwuZ2xvYmFsbG9naWMuY29tL3VzZXIvcHJvZmlsZS9uYXRhbGl5YS5zaXJvbWFraGEvYzc4YTcwNmU5MTM0L2dlbmVyYWwnLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW1hZ2U6IFwiLi9zcmMvYXNzZXRzL2ltYWdlL05hdGFsaXlhLmpwZWdcIixcbiAgICAgICAgICAgIEhUTUxjbGFzczogJ3BlcnNvbi10aWxlJyxcbiAgICAgICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIHZhbDogXCJJdWxpYSBJem9uaW5hXCIsXG4gICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vcG9ydGFsLmdsb2JhbGxvZ2ljLmNvbS91c2VyL3Byb2ZpbGUvbmF0YWxpeWEuc2lyb21ha2hhL2M3OGE3MDZlOTEzNC9nZW5lcmFsJyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICAgICAgaW1hZ2U6IFwiLi9zcmMvYXNzZXRzL2ltYWdlL05hdGFsaXlhLmpwZWdcIixcbiAgICAgICAgICAgICAgSFRNTGNsYXNzOiAncGVyc29uLXRpbGUnLFxuICAgICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgICAgdmFsOiBcIkl1bGlhIEl6b25pbmFcIixcbiAgICAgICAgICAgICAgICAgIGhyZWY6ICdodHRwczovL3BvcnRhbC5nbG9iYWxsb2dpYy5jb20vdXNlci9wcm9maWxlL25hdGFsaXlhLnNpcm9tYWtoYS9jNzhhNzA2ZTkxMzQvZ2VuZXJhbCcsXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuLy8gICAgICAgIHN0YWNrQ2hpbGRyZW46IHRydWUsXG4vLyAgICAgICAgY2hpbGRyZW5Ecm9wTGV2ZWw6IDIsXG4gICAgICAgICAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgICAgICAgIH1dXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbWFnZTogXCIuL3NyYy9hc3NldHMvaW1hZ2UvTmF0YWxpeWEuanBlZ1wiLFxuICAgICAgICAgICAgSFRNTGNsYXNzOiAncGVyc29uLXRpbGUnLFxuICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgdmFsOiBcIkl1bGlhIEl6b25pbmFcIixcbiAgICAgICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9wb3J0YWwuZ2xvYmFsbG9naWMuY29tL3VzZXIvcHJvZmlsZS9uYXRhbGl5YS5zaXJvbWFraGEvYzc4YTcwNmU5MTM0L2dlbmVyYWwnLFxuICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICAgICAgICBpbWFnZTogXCIuL3NyYy9hc3NldHMvaW1hZ2UvTmF0YWxpeWEuanBlZ1wiLFxuICAgICAgICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgICB2YWw6IFwiSXVsaWEgSXpvbmluYVwiLFxuICAgICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vcG9ydGFsLmdsb2JhbGxvZ2ljLmNvbS91c2VyL3Byb2ZpbGUvbmF0YWxpeWEuc2lyb21ha2hhL2M3OGE3MDZlOTEzNC9nZW5lcmFsJyxcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4vLyAgICAgICAgc3RhY2tDaGlsZHJlbjogdHJ1ZSxcbi8vICAgICAgICBjaGlsZHJlbkRyb3BMZXZlbDogMixcbiAgICAgICAgICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGltYWdlOiBcIi4vc3JjL2Fzc2V0cy9pbWFnZS9OYXRhbGl5YS5qcGVnXCIsXG4gICAgICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICB2YWw6IFwiSXVsaWEgSXpvbmluYVwiLFxuICAgICAgICAgICAgICAgIGhyZWY6ICdodHRwczovL3BvcnRhbC5nbG9iYWxsb2dpYy5jb20vdXNlci9wcm9maWxlL25hdGFsaXlhLnNpcm9tYWtoYS9jNzhhNzA2ZTkxMzQvZ2VuZXJhbCcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgICAgIGltYWdlOiBcIi4vc3JjL2Fzc2V0cy9pbWFnZS9OYXRhbGl5YS5qcGVnXCIsXG4gICAgICAgICAgICAgIEhUTUxjbGFzczogJ3BlcnNvbi10aWxlJyxcbiAgICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICAgIHZhbDogXCJJdWxpYSBJem9uaW5hXCIsXG4gICAgICAgICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9wb3J0YWwuZ2xvYmFsbG9naWMuY29tL3VzZXIvcHJvZmlsZS9uYXRhbGl5YS5zaXJvbWFraGEvYzc4YTcwNmU5MTM0L2dlbmVyYWwnLFxuICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbi8vICAgICAgICBzdGFja0NoaWxkcmVuOiB0cnVlLFxuLy8gICAgICAgIGNoaWxkcmVuRHJvcExldmVsOiAyLFxuICAgICAgICAgICAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgICAgICAgICB9XVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW1hZ2U6IFwiLi9zcmMvYXNzZXRzL2ltYWdlL05hdGFsaXlhLmpwZWdcIixcbiAgICAgICAgICAgIEhUTUxjbGFzczogJ3BlcnNvbi10aWxlJyxcbiAgICAgICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIHZhbDogXCJJdWxpYSBJem9uaW5hXCIsXG4gICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vcG9ydGFsLmdsb2JhbGxvZ2ljLmNvbS91c2VyL3Byb2ZpbGUvbmF0YWxpeWEuc2lyb21ha2hhL2M3OGE3MDZlOTEzNC9nZW5lcmFsJyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW1hZ2U6IFwiLi9zcmMvYXNzZXRzL2ltYWdlL05hdGFsaXlhLmpwZWdcIixcbiAgICAgICAgICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgICAgICB2YWw6IFwiSXVsaWEgSXpvbmluYVwiLFxuICAgICAgICAgICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9wb3J0YWwuZ2xvYmFsbG9naWMuY29tL3VzZXIvcHJvZmlsZS9uYXRhbGl5YS5zaXJvbWFraGEvYzc4YTcwNmU5MTM0L2dlbmVyYWwnLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbi8vICAgICAgICBzdGFja0NoaWxkcmVuOiB0cnVlLFxuLy8gICAgICAgIGNoaWxkcmVuRHJvcExldmVsOiAyLFxuICAgICAgICAgICAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGltYWdlOiBcIi4vc3JjL2Fzc2V0cy9pbWFnZS9OYXRhbGl5YS5qcGVnXCIsXG4gICAgICAgICAgICAgICAgSFRNTGNsYXNzOiAncGVyc29uLXRpbGUnLFxuICAgICAgICAgICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBcIkl1bGlhIEl6b25pbmFcIixcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vcG9ydGFsLmdsb2JhbGxvZ2ljLmNvbS91c2VyL3Byb2ZpbGUvbmF0YWxpeWEuc2lyb21ha2hhL2M3OGE3MDZlOTEzNC9nZW5lcmFsJyxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4vLyAgICAgICAgc3RhY2tDaGlsZHJlbjogdHJ1ZSxcbi8vICAgICAgICBjaGlsZHJlbkRyb3BMZXZlbDogMixcbiAgICAgICAgICAgICAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGltYWdlOiBcIi4vc3JjL2Fzc2V0cy9pbWFnZS9OYXRhbGl5YS5qcGVnXCIsXG4gICAgICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICB2YWw6IFwiSXVsZGNkc2NzaWEgSXpvbmluYVwiLFxuICAgICAgICAgICAgICAgIGhyZWY6ICdodHRwczovL3BvcnRhbC5nbG9iYWxsb2dpYy5jb20vdXNlci9wcm9maWxlL25hdGFsaXlhLnNpcm9tYWtoYS9jNzhhNzA2ZTkxMzQvZ2VuZXJhbCcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGltYWdlOiBcIi4vc3JjL2Fzc2V0cy9pbWFnZS9OYXRhbGl5YS5qcGVnXCIsXG4gICAgICAgIEhUTUxjbGFzczogJ3BlcnNvbi10aWxlJyxcbiAgICAgICAgdGV4dDoge1xuICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIHZhbDogXCJJZ29yIFJ1ZGtvXCIsXG4gICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9wb3J0YWwuZ2xvYmFsbG9naWMuY29tL3VzZXIvcHJvZmlsZS9uYXRhbGl5YS5zaXJvbWFraGEvYzc4YTcwNmU5MTM0L2dlbmVyYWwnLFxuICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgc3RhY2tDaGlsZHJlbjogdHJ1ZSxcbiAgICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGltYWdlOiBcIi4vc3JjL2Fzc2V0cy9pbWFnZS9OYXRhbGl5YS5qcGVnXCIsXG4gICAgICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICB2YWw6IFwiTGlsaXlhIEtvbmRyYXRpZXZhXCIsXG4gICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vcG9ydGFsLmdsb2JhbGxvZ2ljLmNvbS91c2VyL3Byb2ZpbGUvbmF0YWxpeWEuc2lyb21ha2hhL2M3OGE3MDZlOTEzNC9nZW5lcmFsJyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGFja0NoaWxkcmVuOiB0cnVlLFxuICAgICAgICAgICAgZHJhd0xpbmVUaHJvdWdoOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW1hZ2U6IFwiLi9zcmMvYXNzZXRzL2ltYWdlL05hdGFsaXlhLmpwZWdcIixcbiAgICAgICAgSFRNTGNsYXNzOiAncGVyc29uLXRpbGUnLFxuICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgdmFsOiBcIlZpa3RvciBNYXR1c292XCIsXG4gICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9wb3J0YWwuZ2xvYmFsbG9naWMuY29tL3VzZXIvcHJvZmlsZS9uYXRhbGl5YS5zaXJvbWFraGEvYzc4YTcwNmU5MTM0L2dlbmVyYWwnLFxuICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgc3RhY2tDaGlsZHJlbjogdHJ1ZSxcbiAgICAgICAgZHJhd0xpbmVUaHJvdWdoOiB0cnVlLFxuICAgICAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW1hZ2U6IFwiLi9zcmMvYXNzZXRzL2ltYWdlL05hdGFsaXlhLmpwZWdcIixcbiAgICAgICAgICAgIEhUTUxjbGFzczogJ3BlcnNvbi10aWxlJyxcbiAgICAgICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIHZhbDogXCJBbGV4YW5kZXIgTGFuaW5cIixcbiAgICAgICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9wb3J0YWwuZ2xvYmFsbG9naWMuY29tL3VzZXIvcHJvZmlsZS9uYXRhbGl5YS5zaXJvbWFraGEvYzc4YTcwNmU5MTM0L2dlbmVyYWwnLFxuICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YWNrQ2hpbGRyZW46IHRydWUsXG4gICAgICAgICAgICBkcmF3TGluZVRocm91Z2g6IHRydWUsXG4gICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW1hZ2U6IFwiLi9zcmMvYXNzZXRzL2ltYWdlL05hdGFsaXlhLmpwZWdcIixcbiAgICAgICAgICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgICAgICB2YWw6IFwiSXVsaWEgSXpvbmluYVwiLFxuICAgICAgICAgICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9wb3J0YWwuZ2xvYmFsbG9naWMuY29tL3VzZXIvcHJvZmlsZS9uYXRhbGl5YS5zaXJvbWFraGEvYzc4YTcwNmU5MTM0L2dlbmVyYWwnLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbi8vICAgICAgICBzdGFja0NoaWxkcmVuOiB0cnVlLFxuLy8gICAgICAgIGNoaWxkcmVuRHJvcExldmVsOiAyLFxuICAgICAgICAgICAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW1hZ2U6IFwiLi9zcmMvYXNzZXRzL2ltYWdlL05hdGFsaXlhLmpwZWdcIixcbiAgICAgICAgICAgIEhUTUxjbGFzczogJ3BlcnNvbi10aWxlJyxcbiAgICAgICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIHZhbDogXCJWaXRhbGlpIExpdHZpblwiLFxuICAgICAgICAgICAgICAgIGhyZWY6ICdodHRwczovL3BvcnRhbC5nbG9iYWxsb2dpYy5jb20vdXNlci9wcm9maWxlL25hdGFsaXlhLnNpcm9tYWtoYS9jNzhhNzA2ZTkxMzQvZ2VuZXJhbCcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbWFnZTogXCIuL3NyYy9hc3NldHMvaW1hZ2UvTmF0YWxpeWEuanBlZ1wiLFxuICAgICAgICAgICAgSFRNTGNsYXNzOiAncGVyc29uLXRpbGUnLFxuICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgdmFsOiBcIlZpdGFsaWkgVGlsaW5za2lpXCIsXG4gICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vcG9ydGFsLmdsb2JhbGxvZ2ljLmNvbS91c2VyL3Byb2ZpbGUvbmF0YWxpeWEuc2lyb21ha2hhL2M3OGE3MDZlOTEzNC9nZW5lcmFsJyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbWFnZTogXCIuL3NyYy9hc3NldHMvaW1hZ2UvTmF0YWxpeWEuanBlZ1wiLFxuICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgIHRleHQ6IHtcbiAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICB2YWw6IFwiWWV2Z2VuaWkgS29sb21ldHNraXlcIixcbiAgICAgICAgICAgIGhyZWY6ICdodHRwczovL3BvcnRhbC5nbG9iYWxsb2dpYy5jb20vdXNlci9wcm9maWxlL25hdGFsaXlhLnNpcm9tYWtoYS9jNzhhNzA2ZTkxMzQvZ2VuZXJhbCcsXG4gICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBzdGFja0NoaWxkcmVuOiB0cnVlLFxuICAgICAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW1hZ2U6IFwiLi9zcmMvYXNzZXRzL2ltYWdlL05hdGFsaXlhLmpwZWdcIixcbiAgICAgICAgICAgIEhUTUxjbGFzczogJ3BlcnNvbi10aWxlJyxcbiAgICAgICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIHZhbDogXCJMaWxpeWEgS29uZHJhdGlldmFcIixcbiAgICAgICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9wb3J0YWwuZ2xvYmFsbG9naWMuY29tL3VzZXIvcHJvZmlsZS9uYXRhbGl5YS5zaXJvbWFraGEvYzc4YTcwNmU5MTM0L2dlbmVyYWwnLFxuICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YWNrQ2hpbGRyZW46IHRydWUsXG4gICAgICAgICAgICBkcmF3TGluZVRocm91Z2g6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGltYWdlOiBcIi4vc3JjL2Fzc2V0cy9pbWFnZS9OYXRhbGl5YS5qcGVnXCIsXG4gICAgICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICB2YWw6IFwiTGlsaXlhIEtvbmRyYXRpZXZhXCIsXG4gICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vcG9ydGFsLmdsb2JhbGxvZ2ljLmNvbS91c2VyL3Byb2ZpbGUvbmF0YWxpeWEuc2lyb21ha2hhL2M3OGE3MDZlOTEzNC9nZW5lcmFsJyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGFja0NoaWxkcmVuOiB0cnVlLFxuICAgICAgICAgICAgZHJhd0xpbmVUaHJvdWdoOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbWFnZTogXCIuL3NyYy9hc3NldHMvaW1hZ2UvTmF0YWxpeWEuanBlZ1wiLFxuICAgICAgICAgICAgSFRNTGNsYXNzOiAncGVyc29uLXRpbGUnLFxuICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgdmFsOiBcIkxpbGl5YSBLb25kcmF0aWV2YVwiLFxuICAgICAgICAgICAgICAgIGhyZWY6ICdodHRwczovL3BvcnRhbC5nbG9iYWxsb2dpYy5jb20vdXNlci9wcm9maWxlL25hdGFsaXlhLnNpcm9tYWtoYS9jNzhhNzA2ZTkxMzQvZ2VuZXJhbCcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhY2tDaGlsZHJlbjogdHJ1ZSxcbiAgICAgICAgICAgIGRyYXdMaW5lVGhyb3VnaDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW1hZ2U6IFwiLi9zcmMvYXNzZXRzL2ltYWdlL05hdGFsaXlhLmpwZWdcIixcbiAgICAgICAgICAgIEhUTUxjbGFzczogJ3BlcnNvbi10aWxlJyxcbiAgICAgICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIHZhbDogXCJMaWxpeWEgS29uZHJhdGlldmFcIixcbiAgICAgICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9wb3J0YWwuZ2xvYmFsbG9naWMuY29tL3VzZXIvcHJvZmlsZS9uYXRhbGl5YS5zaXJvbWFraGEvYzc4YTcwNmU5MTM0L2dlbmVyYWwnLFxuICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YWNrQ2hpbGRyZW46IHRydWUsXG4gICAgICAgICAgICBkcmF3TGluZVRocm91Z2g6IHRydWUsXG4gICAgICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICAgICAgaW1hZ2U6IFwiLi9zcmMvYXNzZXRzL2ltYWdlL05hdGFsaXlhLmpwZWdcIixcbiAgICAgICAgICAgICAgSFRNTGNsYXNzOiAncGVyc29uLXRpbGUnLFxuICAgICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgICAgdmFsOiBcIkl1bGlhIEl6b25pbmFcIixcbiAgICAgICAgICAgICAgICAgIGhyZWY6ICdodHRwczovL3BvcnRhbC5nbG9iYWxsb2dpYy5jb20vdXNlci9wcm9maWxlL25hdGFsaXlhLnNpcm9tYWtoYS9jNzhhNzA2ZTkxMzQvZ2VuZXJhbCcsXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuLy8gICAgICAgIHN0YWNrQ2hpbGRyZW46IHRydWUsXG4vLyAgICAgICAgY2hpbGRyZW5Ecm9wTGV2ZWw6IDIsXG4gICAgICAgICAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBpbWFnZTogXCIuL3NyYy9hc3NldHMvaW1hZ2UvTmF0YWxpeWEuanBlZ1wiLFxuICAgICAgICAgICAgICAgICAgSFRNTGNsYXNzOiAncGVyc29uLXRpbGUnLFxuICAgICAgICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFsOiBcIkl1bGlhIEl6b25pbmFcIixcbiAgICAgICAgICAgICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9wb3J0YWwuZ2xvYmFsbG9naWMuY29tL3VzZXIvcHJvZmlsZS9uYXRhbGl5YS5zaXJvbWFraGEvYzc4YTcwNmU5MTM0L2dlbmVyYWwnLFxuICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSxcbi8vICAgICAgICBzdGFja0NoaWxkcmVuOiB0cnVlLFxuLy8gICAgICAgIGNoaWxkcmVuRHJvcExldmVsOiAyLFxuICAgICAgICAgICAgICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9LFxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbWFnZTogXCIuL3NyYy9hc3NldHMvaW1hZ2UvTmF0YWxpeWEuanBlZ1wiLFxuICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgIHRleHQ6IHtcbiAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICB2YWw6IFwiRG15dHJvIExldml0c2tpeSAoVVMpXCIsXG4gICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9wb3J0YWwuZ2xvYmFsbG9naWMuY29tL3VzZXIvcHJvZmlsZS9uYXRhbGl5YS5zaXJvbWFraGEvYzc4YTcwNmU5MTM0L2dlbmVyYWwnLFxuICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgc3RhY2tDaGlsZHJlbjogdHJ1ZSxcbiAgICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGltYWdlOiBcIi4vc3JjL2Fzc2V0cy9pbWFnZS9OYXRhbGl5YS5qcGVnXCIsXG4gICAgICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICB2YWw6IFwiTGlsaXlhIEtvbmRyYXRpZXZhXCIsXG4gICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vcG9ydGFsLmdsb2JhbGxvZ2ljLmNvbS91c2VyL3Byb2ZpbGUvbmF0YWxpeWEuc2lyb21ha2hhL2M3OGE3MDZlOTEzNC9nZW5lcmFsJyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGFja0NoaWxkcmVuOiB0cnVlLFxuICAgICAgICAgICAgZHJhd0xpbmVUaHJvdWdoOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbWFnZTogXCIuL3NyYy9hc3NldHMvaW1hZ2UvTmF0YWxpeWEuanBlZ1wiLFxuICAgICAgICAgICAgSFRNTGNsYXNzOiAncGVyc29uLXRpbGUnLFxuICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgdmFsOiBcIkxpbGl5YSBLb25kcmF0aWV2YVwiLFxuICAgICAgICAgICAgICAgIGhyZWY6ICdodHRwczovL3BvcnRhbC5nbG9iYWxsb2dpYy5jb20vdXNlci9wcm9maWxlL25hdGFsaXlhLnNpcm9tYWtoYS9jNzhhNzA2ZTkxMzQvZ2VuZXJhbCcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhY2tDaGlsZHJlbjogdHJ1ZSxcbiAgICAgICAgICAgIGRyYXdMaW5lVGhyb3VnaDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW1hZ2U6IFwiLi9zcmMvYXNzZXRzL2ltYWdlL05hdGFsaXlhLmpwZWdcIixcbiAgICAgICAgICAgIEhUTUxjbGFzczogJ3BlcnNvbi10aWxlJyxcbiAgICAgICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIHZhbDogXCJMaWxpeWEgS29uZHJhdGlldmFcIixcbiAgICAgICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9wb3J0YWwuZ2xvYmFsbG9naWMuY29tL3VzZXIvcHJvZmlsZS9uYXRhbGl5YS5zaXJvbWFraGEvYzc4YTcwNmU5MTM0L2dlbmVyYWwnLFxuICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YWNrQ2hpbGRyZW46IHRydWUsXG4gICAgICAgICAgICBkcmF3TGluZVRocm91Z2g6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGltYWdlOiBcIi4vc3JjL2Fzc2V0cy9pbWFnZS9OYXRhbGl5YS5qcGVnXCIsXG4gICAgICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICB2YWw6IFwiTGlsaXlhIEtvbmRyYXRpZXZhXCIsXG4gICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vcG9ydGFsLmdsb2JhbGxvZ2ljLmNvbS91c2VyL3Byb2ZpbGUvbmF0YWxpeWEuc2lyb21ha2hhL2M3OGE3MDZlOTEzNC9nZW5lcmFsJyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGFja0NoaWxkcmVuOiB0cnVlLFxuICAgICAgICAgICAgZHJhd0xpbmVUaHJvdWdoOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGltYWdlOiBcIi4vc3JjL2Fzc2V0cy9pbWFnZS9OYXRhbGl5YS5qcGVnXCIsXG4gICAgICAgIEhUTUxjbGFzczogJ3BlcnNvbi10aWxlJyxcbiAgICAgICAgdGV4dDoge1xuICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIHZhbDogXCJEZW55cyBCcmF0Y2h1a1wiLFxuICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vcG9ydGFsLmdsb2JhbGxvZ2ljLmNvbS91c2VyL3Byb2ZpbGUvbmF0YWxpeWEuc2lyb21ha2hhL2M3OGE3MDZlOTEzNC9nZW5lcmFsJyxcbiAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHN0YWNrQ2hpbGRyZW46IHRydWUsXG4gICAgICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbWFnZTogXCIuL3NyYy9hc3NldHMvaW1hZ2UvTmF0YWxpeWEuanBlZ1wiLFxuICAgICAgICAgICAgSFRNTGNsYXNzOiAncGVyc29uLXRpbGUnLFxuICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgdmFsOiBcIkxpbGl5YSBLb25kcmF0aWV2YVwiLFxuICAgICAgICAgICAgICAgIGhyZWY6ICdodHRwczovL3BvcnRhbC5nbG9iYWxsb2dpYy5jb20vdXNlci9wcm9maWxlL25hdGFsaXlhLnNpcm9tYWtoYS9jNzhhNzA2ZTkxMzQvZ2VuZXJhbCcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhY2tDaGlsZHJlbjogdHJ1ZSxcbiAgICAgICAgICAgIGRyYXdMaW5lVGhyb3VnaDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW1hZ2U6IFwiLi9zcmMvYXNzZXRzL2ltYWdlL05hdGFsaXlhLmpwZWdcIixcbiAgICAgICAgICAgIEhUTUxjbGFzczogJ3BlcnNvbi10aWxlJyxcbiAgICAgICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIHZhbDogXCJMaWxpeWEgS29uZHJhdGlldmFcIixcbiAgICAgICAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9wb3J0YWwuZ2xvYmFsbG9naWMuY29tL3VzZXIvcHJvZmlsZS9uYXRhbGl5YS5zaXJvbWFraGEvYzc4YTcwNmU5MTM0L2dlbmVyYWwnLFxuICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YWNrQ2hpbGRyZW46IHRydWUsXG4gICAgICAgICAgICBkcmF3TGluZVRocm91Z2g6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGltYWdlOiBcIi4vc3JjL2Fzc2V0cy9pbWFnZS9OYXRhbGl5YS5qcGVnXCIsXG4gICAgICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICB2YWw6IFwiTGlsaXlhIEtvbmRyYXRpZXZhXCIsXG4gICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vcG9ydGFsLmdsb2JhbGxvZ2ljLmNvbS91c2VyL3Byb2ZpbGUvbmF0YWxpeWEuc2lyb21ha2hhL2M3OGE3MDZlOTEzNC9nZW5lcmFsJyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGFja0NoaWxkcmVuOiB0cnVlLFxuICAgICAgICAgICAgZHJhd0xpbmVUaHJvdWdoOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbWFnZTogXCIuL3NyYy9hc3NldHMvaW1hZ2UvTmF0YWxpeWEuanBlZ1wiLFxuICAgICAgICAgICAgSFRNTGNsYXNzOiAncGVyc29uLXRpbGUnLFxuICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgdmFsOiBcIkxpbGl5YSBLb25kcmF0aWV2YVwiLFxuICAgICAgICAgICAgICAgIGhyZWY6ICdodHRwczovL3BvcnRhbC5nbG9iYWxsb2dpYy5jb20vdXNlci9wcm9maWxlL25hdGFsaXlhLnNpcm9tYWtoYS9jNzhhNzA2ZTkxMzQvZ2VuZXJhbCcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhY2tDaGlsZHJlbjogdHJ1ZSxcbiAgICAgICAgICAgIGRyYXdMaW5lVGhyb3VnaDogdHJ1ZSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICAgICAgICBpbWFnZTogXCIuL3NyYy9hc3NldHMvaW1hZ2UvTmF0YWxpeWEuanBlZ1wiLFxuICAgICAgICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgICB2YWw6IFwiSXVsaWEgSXpvbmluYVwiLFxuICAgICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vcG9ydGFsLmdsb2JhbGxvZ2ljLmNvbS91c2VyL3Byb2ZpbGUvbmF0YWxpeWEuc2lyb21ha2hhL2M3OGE3MDZlOTEzNC9nZW5lcmFsJyxcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogXCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4vLyAgICAgICAgc3RhY2tDaGlsZHJlbjogdHJ1ZSxcbi8vICAgICAgICBjaGlsZHJlbkRyb3BMZXZlbDogMixcbiAgICAgICAgICAgICAgY29sbGFwc2VkOiB0cnVlLFxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGltYWdlOiBcIi4vc3JjL2Fzc2V0cy9pbWFnZS9OYXRhbGl5YS5qcGVnXCIsXG4gICAgICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICB2YWw6IFwiTGlsaXlhIEtvbmRyYXRpZXZhXCIsXG4gICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vcG9ydGFsLmdsb2JhbGxvZ2ljLmNvbS91c2VyL3Byb2ZpbGUvbmF0YWxpeWEuc2lyb21ha2hhL2M3OGE3MDZlOTEzNC9nZW5lcmFsJyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGFja0NoaWxkcmVuOiB0cnVlLFxuLy8gICAgICAgICAgICBjaGlsZHJlbjogW3tcbi8vICAgICAgICAgICAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4vLyAgICAgICAgICAgIH1dXG4gICAgICAgICAgfSxcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICBdXG4gIH1cbn07XG5cbmxldCBjb25maWcsIHBhcmVudF9uLCBjaF8xLCBjaF8yLCBjaF8zLCBjaF80O1xuXG5sZXQgY2hhcnQgPSBbXG4gIGNvbmZpZyA9IHtcbiAgICBjb250YWluZXI6IFwiI2NvbGxhcHNhYmxlLWV4YW1wbGVcIixcbiAgICBhbmltYXRlT25Jbml0OiB0cnVlLFxuICAgIGNhbGxiYWNrOiB7XG4gICAgICBvblRvZ2dsZUNvbGxhcHNlRmluaXNoZWQ6IGZ1bmN0aW9uIChlKSB7XG4vLyAgICAgICAgc2NhbGVPbkNvbGxhcHNlKGUuWCk7XG4gICAgICB9LFxuICAgIH0sXG4gICAgbm9kZToge1xuICAgICAgY29sbGFwc2FibGU6IHRydWVcbiAgICB9LFxuICAgIGxldmVsU2VwYXJhdGlvbjogMzAsXG4gICAgc2libGluZ1NlcGFyYXRpb246IDEwLFxuICAgIHN1YlRlZVNlcGFyYXRpb246IDE1LFxuICAgIG5vZGVBbGlnbjogJ0xFRlQnLFxuICAgIGNvbm5lY3RvcnM6IHtcbiAgICAgIHR5cGU6ICdzdGVwJyxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgICdzdHJva2UnOiAnZ3JleScsXG4gICAgICAgICdzdHJva2Utd2lkdGgnOiA0LFxuICAgICAgfVxuICAgIH0sXG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICBub2RlQW5pbWF0aW9uOiBcImxpbmVhciBcIixcbiAgICAgIG5vZGVTcGVlZDogNTAwLFxuICAgICAgY29ubmVjdG9yc0FuaW1hdGlvbjogXCJsaW5lYXJcIixcbiAgICAgIGNvbm5lY3RvcnNTcGVlZDogMTAwXG4gICAgfVxuICB9LFxuICBwYXJlbnRfbiA9IHtcbiAgICBpbWFnZTogXCIuL3NyYy9hc3NldHMvaW1hZ2UvTmF0YWxpeWEuanBlZ1wiLFxuICAgIEhUTUxjbGFzczogJ3BlcnNvbi10aWxlJyxcbiAgICBhZGRpdGlvbmFsSW5mbzoge1xuICAgICAgcG9zdDogJ0RpcmVjdG9yJyxcbiAgICAgIHByb2plY3RzOiBbXG4gICAgICAgIHtuYW1lOiAnSGlsdGknLCB1cmw6ICcjJ30sXG4gICAgICAgIHtuYW1lOiAnUmltYWdlJywgdXJsOiAnIyd9XG4gICAgICBdLFxuICAgIH0sXG4gICAgdGV4dDoge1xuICAgICAgbmFtZTogXCJOYXRhbGl5YSBTaXJvbWFraGFcIixcbiAgICAgIG5vZGVBbGlnbjogJ0JPVFRPTScsXG4gICAgfSxcbiAgfSxcbiAgY2hfMSA9IHtcbiAgICBwYXJlbnQ6IHBhcmVudF9uLFxuICAgIGltYWdlOiBcIi4vc3JjL2Fzc2V0cy9pbWFnZS9OYXRhbGl5YS5qcGVnXCIsXG4gICAgSFRNTGNsYXNzOiAncGVyc29uLXRpbGUnLFxuICAgIGFkZGl0aW9uYWxJbmZvOiB7XG4gICAgICBwb3N0OiAnTWFuYWdlcicsXG4gICAgICBwcm9qZWN0czogW1xuICAgICAgICB7bmFtZTogJ01lZGF2YW50JywgdXJsOiAnIyd9LFxuICAgICAgICB7bmFtZTogJ1NvbWUgZWxzZScsIHVybDogJyMnfVxuICAgICAgXSxcbiAgICB9LFxuICAgIHRleHQ6IHtcbiAgICAgIG5hbWU6IFwiSXVsaWEgSXpvbmluYVwiLFxuICAgICAgbm9kZUFsaWduOiAnQk9UVE9NJyxcbiAgICB9LFxuICB9LFxuICBjaF8yID0ge1xuICAgIHBhcmVudDogcGFyZW50X24sXG4gICAgaW1hZ2U6IFwiLi9zcmMvYXNzZXRzL2ltYWdlL05hdGFsaXlhLmpwZWdcIixcbiAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgYWRkaXRpb25hbEluZm86IHtcbiAgICAgIHBvc3Q6ICdHb2QnLFxuICAgICAgcHJvamVjdHM6IFtcbiAgICAgICAge25hbWU6ICdTb2ZvcycsIHVybDogJyMnfSxcbiAgICAgICAge25hbWU6ICdSaW1hZ2UnLCB1cmw6ICcjJ31cbiAgICAgIF0sXG4gICAgfSxcbiAgICB0ZXh0OiB7XG4gICAgICBuYW1lOiBcIklnb3IgUnVka29cIixcbiAgICAgIG5vZGVBbGlnbjogJ0JPVFRPTScsXG4gICAgfSxcbiAgICBzdGFja0NoaWxkcmVuOiB0cnVlLFxuICB9LFxuICBjaF8zID0ge1xuICAgIHBhcmVudDogcGFyZW50X24sXG4gICAgaW1hZ2U6IFwiLi9zcmMvYXNzZXRzL2ltYWdlL05hdGFsaXlhLmpwZWdcIixcbiAgICBIVE1MY2xhc3M6ICdwZXJzb24tdGlsZScsXG4gICAgYWRkaXRpb25hbEluZm86IHtcbiAgICAgIHBvc3Q6ICdHb2QnLFxuICAgICAgcHJvamVjdHM6IFtcbiAgICAgICAge25hbWU6ICdTb2ZvcycsIHVybDogJyMnfSxcbiAgICAgICAge25hbWU6ICdSaW1hZ2UnLCB1cmw6ICcjJ31cbiAgICAgIF0sXG4gICAgfSxcbiAgICB0ZXh0OiB7XG4gICAgICBuYW1lOiBcIk5hdGFsaXlhIFNpcm9tYWtoYVwiLFxuICAgICAgbm9kZUFsaWduOiAnQk9UVE9NJyxcbiAgICB9LFxuICAgIHN0YWNrQ2hpbGRyZW46IHRydWUsXG4gIH0sXG4gIGNoXzQgPSB7XG4gICAgcGFyZW50OiBjaF8zLFxuICAgIGltYWdlOiBcIi4vc3JjL2Fzc2V0cy9pbSBhZ2UvTmF0YWxpeWEuanBlZ1wiLFxuICAgIEhUTUxjbGFzczogJ3BlcnNvbi10aWxlJyxcbiAgICBhZGRpdGlvbmFsSW5mbzoge1xuICAgICAgcG9zdDogJ0dvZCcsXG4gICAgICBwcm9qZWN0czogW10sXG4gICAgfSxcbiAgICB0ZXh0OiB7XG4gICAgICBuYW1lOiBcIk5hdGFsaXlhIFNpcm9tYWtoYVwiLFxuICAgICAgbm9kZUFsaWduOiAnQk9UVE9NJyxcbiAgICB9LFxuICAgIHN0YWNrQ2hpbGRyZW46IHRydWUsXG4gIH0sXG5dO1xuXG5sZXQgY2hhcnRfY29uZmlnID0gY2hhcnQ7XG5jaGFydF9jb25maWcubWFwKChlbCwgaW5kKSA9PiBlbC5IVE1MaWQgPSBpbmQpO1xuXG5leHBvcnQge2NoYXJ0X2NvbmZpZ307IiwiaW1wb3J0ICcuLi9hc3NldHMvc2Nzcy9pbmRleC5zY3NzJztcblxuY29uc3QgcGVyc29ucyA9IFtcbiAge1xuICAgIFwibmFtZVwiOiBcIk5hdGFsaXlhIFNpcm9tYWtoYVwiLFxuICAgIFwicGFyXCI6ICdyb290JyxcbiAgICBcImNoaWxkcmVuXCI6IFtdLFxuICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2dsby1hc3NldHMuZ2xvYmFsbG9naWMuY29tL3N5c3RlbS9kYXRhLzU1NDk1L3Byb2ZpbGUvTlMuanBnPzE1MTQ4OTk1MTZcIixcbiAgICBcIkhUTUxjbGFzc1wiOiBcInBlcnNvbi10aWxlXCIsXG4gICAgY29sbGFwc2VkOiB0cnVlLFxuICAgIFwiYWRkaXRpb25hbEluZm9cIjoge1xuICAgICAgXCJwb3N0XCI6IFwiRGlyZWN0b3IsRW5naW5lZXJpbmdEaXJlY3RvcixFbmdpbmVlcmluZ0RpcmVjdG9yLEVuZ2luZWVyaW5nXCIsXG4gICAgICBcInByb2ZpbGVMaW5rXCI6IFwiaHR0cHM6Ly9nbG8uZ2xvYmFsbG9naWMuY29tL3VzZXJzL3Byb2ZpbGUvbmF0YWxpeWEuc2lyb21ha2hhXCIsXG4gICAgICBcInByb2plY3RzXCI6ICdNVEMgV0ZBIFRlc3RTT1AsIFNvcGhvcycsXG4gICAgfSxcbiAgICBcInRleHRcIjoge1xuICAgICAgXCJuYW1lXCI6IFwiTmF0YWxpeWEgU2lyb21ha2hhXCIsXG4gICAgICBcIm5vZGVBbGlnblwiOiBcIkJPVFRPTVwiXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiWWV2Z2VuaWkgS29sb21ldHNreWlcIixcbiAgICBcInBhclwiOiBcIk5hdGFsaXlhIFNpcm9tYWtoYVwiLFxuICAgIFwiY2hpbGRyZW5cIjogW10sXG4gICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vZ2xvLWFzc2V0cy5nbG9iYWxsb2dpYy5jb20vc3lzdGVtL2RhdGEvMzU0OS9wcm9maWxlLzUxNzI1LmpwZz8xMzEyMzc4OTI1XCIsXG4gICAgXCJIVE1MY2xhc3NcIjogXCJwZXJzb24tdGlsZVwiLFxuICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICBcImFkZGl0aW9uYWxJbmZvXCI6IHtcbiAgICAgIFwicG9zdFwiOiBcIlNlbmlvciBNYW5hZ2VyLEVuZ2luZWVyaW5nXCIsXG4gICAgICBcInByb2plY3RzXCI6ICdMZUNyb3ksIFNvcGhvcycsXG4gICAgfSxcbiAgICBcInRleHRcIjoge1xuICAgICAgXCJuYW1lXCI6IFwiWWV2Z2VuaWkgS29sb21ldHNreWlcIixcbiAgICAgIFwibm9kZUFsaWduXCI6IFwiQk9UVE9NXCJcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBcIm5hbWVcIjogXCJJZ29yIFJ1ZGtvXCIsXG4gICAgXCJwYXJcIjogXCJOYXRhbGl5YSBTaXJvbWFraGFcIixcbiAgICBcImNoaWxkcmVuXCI6IFtdLFxuICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2dsby1hc3NldHMuZ2xvYmFsbG9naWMuY29tL3N5c3RlbS9kYXRhLzMxMzE3L3Byb2ZpbGUvSWdvcl9SdWRrb18oMSkuanBnPzE0NTAwOTQxNzFcIixcbiAgICBcIkhUTUxjbGFzc1wiOiBcInBlcnNvbi10aWxlXCIsXG4gICAgY29sbGFwc2VkOiB0cnVlLFxuICAgIFwiYWRkaXRpb25hbEluZm9cIjoge1xuICAgICAgXCJwb3N0XCI6IFwiRGlyZWN0b3IsRW5naW5lZXJpbmdcIixcbiAgICAgIFwicHJvamVjdHNcIjogJ0xlQ3JveSwgU29waG9zJyxcbiAgICB9LFxuICAgIFwidGV4dFwiOiB7XG4gICAgICBcIm5hbWVcIjogXCJJZ29yIFJ1ZGtvXCIsXG4gICAgICBcIm5vZGVBbGlnblwiOiBcIkJPVFRPTVwiXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiRGVueXMgQnJhdGNodWtcIixcbiAgICBcInBhclwiOiBcIk5hdGFsaXlhIFNpcm9tYWtoYVwiLFxuICAgIFwiY2hpbGRyZW5cIjogW10sXG4gICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vZ2xvLWFzc2V0cy5nbG9iYWxsb2dpYy5jb20vc3lzdGVtL2RhdGEvNzA2MTIvcHJvZmlsZS9kZW55cy1zbWlsZS5qcGc/MTU0MjgxNzc0NlwiLFxuICAgIFwiSFRNTGNsYXNzXCI6IFwicGVyc29uLXRpbGVcIixcbiAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgXCJhZGRpdGlvbmFsSW5mb1wiOiB7XG4gICAgICBcInBvc3RcIjogXCJEaXJlY3RvcixFbmdpbmVlcmluZ1wiLFxuICAgICAgXCJwcm9qZWN0c1wiOiAnQUJDLUV4cGVuc2UgcmVwb3J0IHNvbHV0aW9uJyxcbiAgICB9LFxuICAgIFwidGV4dFwiOiB7XG4gICAgICBcIm5hbWVcIjogXCJEZW55cyBCcmF0Y2h1a1wiLFxuICAgICAgXCJub2RlQWxpZ25cIjogXCJCT1RUT01cIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwibmFtZVwiOiBcIlZpa3RvciBNYXR1c292XCIsXG4gICAgXCJwYXJcIjogXCJOYXRhbGl5YSBTaXJvbWFraGFcIixcbiAgICBcImNoaWxkcmVuXCI6IFtdLFxuICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2dsby1hc3NldHMuZ2xvYmFsbG9naWMuY29tL3N5c3RlbS9kYXRhLzIwNjc5L3Byb2ZpbGUvbWVfd2VkZGluZzAuanBnPzE0MTUxMTYzMTlcIixcbiAgICBcIkhUTUxjbGFzc1wiOiBcInBlcnNvbi10aWxlXCIsXG4gICAgY29sbGFwc2VkOiB0cnVlLFxuICAgIFwiYWRkaXRpb25hbEluZm9cIjoge1xuICAgICAgXCJwb3N0XCI6IFwiRGlyZWN0b3IsRW5naW5lZXJpbmdcIixcbiAgICAgIFwicHJvamVjdHNcIjogW11cbiAgICB9LFxuICAgIFwidGV4dFwiOiB7XG4gICAgICBcIm5hbWVcIjogXCJWaWt0b3IgTWF0dXNvdlwiLFxuICAgICAgXCJub2RlQWxpZ25cIjogXCJCT1RUT01cIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwibmFtZVwiOiBcIlZpa3RvciBNYXR1c292IGNoaWxkXCIsXG4gICAgXCJwYXJcIjogXCJWaWt0b3IgTWF0dXNvdlwiLFxuICAgIFwiY2hpbGRyZW5cIjogW10sXG4gICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vZ2xvLWFzc2V0cy5nbG9iYWxsb2dpYy5jb20vc3lzdGVtL2RhdGEvMjA2NzkvcHJvZmlsZS9tZV93ZWRkaW5nMC5qcGc/MTQxNTExNjMxOVwiLFxuICAgIFwiSFRNTGNsYXNzXCI6IFwicGVyc29uLXRpbGVcIixcbiAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgXCJhZGRpdGlvbmFsSW5mb1wiOiB7XG4gICAgICBcInBvc3RcIjogXCJEaXJlY3RvcixFbmdpbmVlcmluZ1wiLFxuICAgICAgXCJwcm9qZWN0c1wiOiBcIk1pY3Jvc29mdCAtIFNlcnZpY2UgRGVsaXZlcnlcIlxuICAgIH0sXG4gICAgXCJ0ZXh0XCI6IHtcbiAgICAgIFwibmFtZVwiOiBcIlZpa3RvciBNYXR1c292XCIsXG4gICAgICBcIm5vZGVBbGlnblwiOiBcIkJPVFRPTVwiXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiVmlrdG9yIE1hdHVzb3YgY2hpbGRcIixcbiAgICBcInBhclwiOiBcIlZpa3RvciBNYXR1c292XCIsXG4gICAgXCJjaGlsZHJlblwiOiBbXSxcbiAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9nbG8tYXNzZXRzLmdsb2JhbGxvZ2ljLmNvbS9zeXN0ZW0vZGF0YS8yMDY3OS9wcm9maWxlL21lX3dlZGRpbmcwLmpwZz8xNDE1MTE2MzE5XCIsXG4gICAgXCJIVE1MY2xhc3NcIjogXCJwZXJzb24tdGlsZVwiLFxuICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICBcImFkZGl0aW9uYWxJbmZvXCI6IHtcbiAgICAgIFwicG9zdFwiOiBcIkRpcmVjdG9yLEVuZ2luZWVyaW5nXCIsXG4gICAgICBcInByb2plY3RzXCI6IFwiTWljcm9zb2Z0IC0gU2VydmljZSBEZWxpdmVyeVwiXG4gICAgfSxcbiAgICBcInRleHRcIjoge1xuICAgICAgXCJuYW1lXCI6IFwiVmlrdG9yIE1hdHVzb3ZcIixcbiAgICAgIFwibm9kZUFsaWduXCI6IFwiQk9UVE9NXCJcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBcIm5hbWVcIjogXCJWaWt0b3IgTWF0dXNvdiBjaGlsZFwiLFxuICAgIFwicGFyXCI6IFwiVmlrdG9yIE1hdHVzb3ZcIixcbiAgICBcImNoaWxkcmVuXCI6IFtdLFxuICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2dsby1hc3NldHMuZ2xvYmFsbG9naWMuY29tL3N5c3RlbS9kYXRhLzIwNjc5L3Byb2ZpbGUvbWVfd2VkZGluZzAuanBnPzE0MTUxMTYzMTlcIixcbiAgICBcIkhUTUxjbGFzc1wiOiBcInBlcnNvbi10aWxlXCIsXG4gICAgY29sbGFwc2VkOiB0cnVlLFxuICAgIFwiYWRkaXRpb25hbEluZm9cIjoge1xuICAgICAgXCJwb3N0XCI6IFwiRGlyZWN0b3IsRW5naW5lZXJpbmdcIixcbiAgICAgIFwicHJvamVjdHNcIjogXCJNaWNyb3NvZnQgLSBTZXJ2aWNlIERlbGl2ZXJ5XCJcbiAgICB9LFxuICAgIFwidGV4dFwiOiB7XG4gICAgICBcIm5hbWVcIjogXCJWaWt0b3IgTWF0dXNvdlwiLFxuICAgICAgXCJub2RlQWxpZ25cIjogXCJCT1RUT01cIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwibmFtZVwiOiBcIlZpa3RvciBNYXR1c292IGNoaWxkXCIsXG4gICAgXCJwYXJcIjogXCJWaWt0b3IgTWF0dXNvdlwiLFxuICAgIFwiY2hpbGRyZW5cIjogW10sXG4gICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vZ2xvLWFzc2V0cy5nbG9iYWxsb2dpYy5jb20vc3lzdGVtL2RhdGEvMjA2NzkvcHJvZmlsZS9tZV93ZWRkaW5nMC5qcGc/MTQxNTExNjMxOVwiLFxuICAgIFwiSFRNTGNsYXNzXCI6IFwicGVyc29uLXRpbGVcIixcbiAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgXCJhZGRpdGlvbmFsSW5mb1wiOiB7XG4gICAgICBcInBvc3RcIjogXCJEaXJlY3RvcixFbmdpbmVlcmluZ1wiLFxuICAgICAgXCJwcm9qZWN0c1wiOiBcIk1pY3Jvc29mdCAtIFNlcnZpY2UgRGVsaXZlcnlcIlxuICAgIH0sXG4gICAgXCJ0ZXh0XCI6IHtcbiAgICAgIFwibmFtZVwiOiBcIlZpa3RvciBNYXR1c292IGNoaWxkXCIsXG4gICAgICBcIm5vZGVBbGlnblwiOiBcIkJPVFRPTVwiXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiSXVsaWlhIEl6b25pbmFcIixcbiAgICBcInBhclwiOiBcIk5hdGFsaXlhIFNpcm9tYWtoYVwiLFxuICAgIFwiY2hpbGRyZW5cIjogW10sXG4gICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vZ2xvLWFzc2V0cy5nbG9iYWxsb2dpYy5jb20vc3lzdGVtL2RhdGEvMTIwODEvcHJvZmlsZS9JTUdfMDY0OS5qcGc/MTM2MDkzNjcyN1wiLFxuICAgIFwiSFRNTGNsYXNzXCI6IFwicGVyc29uLXRpbGVcIixcbiAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgXCJhZGRpdGlvbmFsSW5mb1wiOiB7XG4gICAgICBcInBvc3RcIjogXCJEaXJlY3RvcixFbmdpbmVlcmluZ1wiLFxuICAgICAgXCJwcm9qZWN0c1wiOiBcIk1pY3Jvc29mdCAtIFNlcnZpY2UgRGVsaXZlcnlcIlxuICAgIH0sXG4gICAgXCJ0ZXh0XCI6IHtcbiAgICAgIFwibmFtZVwiOiBcIkl1bGlpYSBJem9uaW5hXCIsXG4gICAgICBcIm5vZGVBbGlnblwiOiBcIkJPVFRPTVwiXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiSXVsaWlhIEl6b25pbmEgY2hpbGRcIixcbiAgICBcInBhclwiOiBcIkl1bGlpYSBJem9uaW5hXCIsXG4gICAgXCJjaGlsZHJlblwiOiBbXSxcbiAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9nbG8tYXNzZXRzLmdsb2JhbGxvZ2ljLmNvbS9zeXN0ZW0vZGF0YS8xMjA4MS9wcm9maWxlL0lNR18wNjQ5LmpwZz8xMzYwOTM2NzI3XCIsXG4gICAgXCJIVE1MY2xhc3NcIjogXCJwZXJzb24tdGlsZVwiLFxuICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICBcImFkZGl0aW9uYWxJbmZvXCI6IHtcbiAgICAgIFwicG9zdFwiOiBcIkRpcmVjdG9yLEVuZ2luZWVyaW5nXCIsXG4gICAgICBcInByb2plY3RzXCI6IFwiTWljcm9zb2Z0IC0gU2VydmljZSBEZWxpdmVyeVwiXG4gICAgfSxcbiAgICBcInRleHRcIjoge1xuICAgICAgXCJuYW1lXCI6IFwiSXVsaWlhIEl6b25pbmEgY2hpbGRcIixcbiAgICAgIFwibm9kZUFsaWduXCI6IFwiQk9UVE9NXCJcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBcIm5hbWVcIjogXCJJdWxpaWEgSXpvbmluYSBjaGlsZFwiLFxuICAgIFwicGFyXCI6IFwiSXVsaWlhIEl6b25pbmFcIixcbiAgICBcImNoaWxkcmVuXCI6IFtdLFxuICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2dsby1hc3NldHMuZ2xvYmFsbG9naWMuY29tL3N5c3RlbS9kYXRhLzEyMDgxL3Byb2ZpbGUvSU1HXzA2NDkuanBnPzEzNjA5MzY3MjdcIixcbiAgICBcIkhUTUxjbGFzc1wiOiBcInBlcnNvbi10aWxlXCIsXG4gICAgY29sbGFwc2VkOiB0cnVlLFxuICAgIFwiYWRkaXRpb25hbEluZm9cIjoge1xuICAgICAgXCJwb3N0XCI6IFwiRGlyZWN0b3IsRW5naW5lZXJpbmdcIixcbiAgICAgIFwicHJvamVjdHNcIjogXCJNaWNyb3NvZnQgLSBTZXJ2aWNlIERlbGl2ZXJ5XCJcbiAgICB9LFxuICAgIFwidGV4dFwiOiB7XG4gICAgICBcIm5hbWVcIjogXCJJdWxpaWEgSXpvbmluYSBjaGlsZFwiLFxuICAgICAgXCJub2RlQWxpZ25cIjogXCJCT1RUT01cIlxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwibmFtZVwiOiBcIkl1bGlpYSBJem9uaW5hIGNoaWxkXCIsXG4gICAgXCJwYXJcIjogXCJJdWxpaWEgSXpvbmluYVwiLFxuICAgIFwiY2hpbGRyZW5cIjogW10sXG4gICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vZ2xvLWFzc2V0cy5nbG9iYWxsb2dpYy5jb20vc3lzdGVtL2RhdGEvMTIwODEvcHJvZmlsZS9JTUdfMDY0OS5qcGc/MTM2MDkzNjcyN1wiLFxuICAgIFwiSFRNTGNsYXNzXCI6IFwicGVyc29uLXRpbGVcIixcbiAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgXCJhZGRpdGlvbmFsSW5mb1wiOiB7XG4gICAgICBcInBvc3RcIjogXCJEaXJlY3RvcixFbmdpbmVlcmluZ1wiLFxuICAgICAgXCJwcm9qZWN0c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJBZXJvIERldmVsb3BtZW50XCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCIjXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIiBSaW1hZ2VcIixcbiAgICAgICAgICBcInVybFwiOiBcIiNcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICBcInRleHRcIjoge1xuICAgICAgXCJuYW1lXCI6IFwiSXVsaWlhIEl6b25pbmEgY2hpbGRcIixcbiAgICAgIFwibm9kZUFsaWduXCI6IFwiQk9UVE9NXCJcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBcIm5hbWVcIjogXCJJdWxpaWEgSXpvbmluYSBjaGlsZFwiLFxuICAgIFwicGFyXCI6IFwiSXVsaWlhIEl6b25pbmFcIixcbiAgICBcImNoaWxkcmVuXCI6IFtdLFxuICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2dsby1hc3NldHMuZ2xvYmFsbG9naWMuY29tL3N5c3RlbS9kYXRhLzEyMDgxL3Byb2ZpbGUvSU1HXzA2NDkuanBnPzEzNjA5MzY3MjdcIixcbiAgICBcIkhUTUxjbGFzc1wiOiBcInBlcnNvbi10aWxlXCIsXG4gICAgY29sbGFwc2VkOiB0cnVlLFxuICAgIFwiYWRkaXRpb25hbEluZm9cIjoge1xuICAgICAgXCJwb3N0XCI6IFwiRGlyZWN0b3IsRW5naW5lZXJpbmdcIixcbiAgICAgIFwicHJvamVjdHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiQWVybyBEZXZlbG9wbWVudFwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiI1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCIgUmltYWdlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCIjXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAgXCJ0ZXh0XCI6IHtcbiAgICAgIFwibmFtZVwiOiBcIkl1bGlpYSBJem9uaW5hIGNoaWxkXCIsXG4gICAgICBcIm5vZGVBbGlnblwiOiBcIkJPVFRPTVwiXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJuYW1lXCI6IFwiSXVsaWlhIEl6b25pbmEgY2hpbGRcIixcbiAgICBcInBhclwiOiBcIkl1bGlpYSBJem9uaW5hXCIsXG4gICAgXCJjaGlsZHJlblwiOiBbXSxcbiAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9nbG8tYXNzZXRzLmdsb2JhbGxvZ2ljLmNvbS9zeXN0ZW0vZGF0YS8xMjA4MS9wcm9maWxlL0lNR18wNjQ5LmpwZz8xMzYwOTM2NzI3XCIsXG4gICAgXCJIVE1MY2xhc3NcIjogXCJwZXJzb24tdGlsZVwiLFxuICAgIGNvbGxhcHNlZDogdHJ1ZSxcbiAgICBcImFkZGl0aW9uYWxJbmZvXCI6IHtcbiAgICAgIFwicG9zdFwiOiBcIkRpcmVjdG9yLEVuZ2luZWVyaW5nXCIsXG4gICAgICBcInByb2plY3RzXCI6IFwiTWljcm9zb2Z0IC0gU2VydmljZSBEZWxpdmVyeVwiXG4gICAgfSxcbiAgICBcInRleHRcIjoge1xuICAgICAgXCJuYW1lXCI6IFwiSXVsaWlhIEl6b25pbmEgY2hpbGRcIixcbiAgICAgIFwibm9kZUFsaWduXCI6IFwiQk9UVE9NXCJcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBcIm5hbWVcIjogXCJJdWxpaWEgSXpvbmluYSBjaGlsZFwiLFxuICAgIFwicGFyXCI6IFwiSXVsaWlhIEl6b25pbmFcIixcbiAgICBcImNoaWxkcmVuXCI6IFtdLFxuICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2dsby1hc3NldHMuZ2xvYmFsbG9naWMuY29tL3N5c3RlbS9kYXRhLzEyMDgxL3Byb2ZpbGUvSU1HXzA2NDkuanBnPzEzNjA5MzY3MjdcIixcbiAgICBcIkhUTUxjbGFzc1wiOiBcInBlcnNvbi10aWxlXCIsXG4gICAgY29sbGFwc2VkOiB0cnVlLFxuICAgIFwiYWRkaXRpb25hbEluZm9cIjoge1xuICAgICAgXCJwb3N0XCI6IFwiRGlyZWN0b3IsRW5naW5lZXJpbmdcIixcbiAgICAgIFwicHJvamVjdHNcIjogXCJBZXJvIERldmVsb3BtZW50XCJcbiAgICB9LFxuICAgIFwidGV4dFwiOiB7XG4gICAgICBcIm5hbWVcIjogXCJJdWxpaWEgSXpvbmluYSBjaGlsZFwiLFxuICAgICAgXCJub2RlQWxpZ25cIjogXCJCT1RUT01cIlxuICAgIH1cbiAgfSxcbl07XG5cbmNvbnN0IHN2ZzEgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3ZnJyk7XG5jb25zdCB3cmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbGxhcHNhYmxlLWV4YW1wbGUnKTtcbmNvbnN0IGNsb3NlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNsb3NlLWJ0bicpO1xuY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRhaW5lcicpO1xuY29uc3QgbW9kYWxPdmVybGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsLW92ZXJsYXknKTtcbmxldCB0cmVlO1xuXG5mdW5jdGlvbiBzZXRQZXJzb25JZCgpIHtcbiAgcGVyc29ucy5tYXAoKGVsLCBpbmQpID0+IGVsLkhUTUxpZCA9IGluZCArIDEpO1xufVxuXG5mdW5jdGlvbiBjb21iaW5lTmVzdGVkTm9kZXMoKSB7XG4gIHNldFBlcnNvbklkKCk7XG4gIGxldCBzb3J0ZWROb2RlcyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGVyc29ucy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBlbGVtZW50ID0gcGVyc29uc1tpXTtcblxuICAgIGZvciAobGV0IGogPSBpOyBqIDwgcGVyc29ucy5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IGVsZW1lbnQyID0gcGVyc29uc1tqXTtcblxuICAgICAgaWYgKGVsZW1lbnQubmFtZSA9PT0gZWxlbWVudDIucGFyKSB7XG4gICAgICAgIGVsZW1lbnQuY2hpbGRyZW4ucHVzaChlbGVtZW50Mik7XG4gICAgICAgIHNob3dIaWRlQ29sbGFwc2VkKGVsZW1lbnQyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGVkTm9kZXMucHVzaChlbGVtZW50KTtcbiAgfVxuXG4gIHNvcnRlZE5vZGVzLm1hcCgoaXRlbSkgPT4ge1xuICAgIGlmICghaXRlbS5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIGl0ZW0uY29sbGFwc2VkID0gZmFsc2U7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gc29ydGVkTm9kZXNbMF07XG59XG5cbmxldCBjaGFydF9jb25maWcgPSB7XG4gIGNoYXJ0OiB7XG4gICAgY29udGFpbmVyOiBcIiNjb2xsYXBzYWJsZS1leGFtcGxlXCIsXG4gICAgYW5pbWF0ZU9uSW5pdDogdHJ1ZSxcbiAgICBjYWxsYmFjazoge1xuICAgICAgb25Ub2dnbGVDb2xsYXBzZUZpbmlzaGVkOiBmdW5jdGlvbiAoZSkge1xuLy8gICAgICAgIHNjYWxlT25Db2xsYXBzZShlLlgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbm9kZToge1xuICAgICAgY29sbGFwc2FibGU6IHRydWVcbiAgICB9LFxuICAgIGxldmVsU2VwYXJhdGlvbjogMTIwLFxuICAgIHNpYmxpbmdTZXBhcmF0aW9uOiA1MCxcbiAgICBzdWJUZWVTZXBhcmF0aW9uOiA1MCxcbi8vICAgIG5vZGVBbGlnbjogJ1RPUCcsXG4gICAgY29ubmVjdG9yczoge1xuICAgICAgdHlwZTogJ3N0ZXAnLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgJ3N0cm9rZSc6ICcjNzI4NDlhJyxcbiAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDIsXG4gICAgICB9XG4gICAgfSxcbiAgICBhbmltYXRpb246IHtcbiAgICAgIG5vZGVBbmltYXRpb246IFwibGluZWFyIFwiLFxuICAgICAgbm9kZVNwZWVkOiA1MDAsXG4gICAgICBjb25uZWN0b3JzQW5pbWF0aW9uOiBcImxpbmVhclwiLFxuICAgICAgY29ubmVjdG9yc1NwZWVkOiAxMDBcbiAgICB9XG4gIH0sXG4gIG5vZGVTdHJ1Y3R1cmU6IGNvbWJpbmVOZXN0ZWROb2RlcygpXG59O1xuXG5mdW5jdGlvbiBzaG93SGlkZUNvbGxhcHNlZChlbGVtZW50KSB7XG4vLyAgY29uc29sZS5sb2coZWxlbWVudCk7XG4gIGlmICghZWxlbWVudC5jaGlsZHJlbi5sZW5ndGgpIHtcbi8vICAgIGVsZW1lbnQuY29sbGFwc2VkID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2NhbGVTdGVwKCkge1xuICBsZXQgc2NhbGUgPSAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgc2NhbGUgPSBzY2FsZSArICgxIC8gMTApO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxufVxuXG5sZXQgY291bnRlciA9IGdldFNjYWxlU3RlcCgpO1xubGV0IGN1cnJlbnRab29tID0gMTtcbmxldCB6b29tU3RlcCA9IGNvdW50ZXIoKTtcblxuY2xhc3MgTW9kYWwge1xuICBjb25zdHJ1Y3Rvcihtb2RhbEluZm8pIHtcbiAgICB0aGlzLm1vZGFsSW5mbyA9IG1vZGFsSW5mbztcbiAgICB0aGlzLmFkZENhbmNlbEJ0bkV2ZW50TGlzdGVuZXIoKTtcbiAgfVxuXG4gIGFkZENhbmNlbEJ0bkV2ZW50TGlzdGVuZXIoKSB7XG4gICAgdGhpcy5tb2RhbEluZm8uTU9EQUxfQ0FOQ0VMX0JUTi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMuY2xvc2VNb2RhbCgpO1xuICAgIH0pXG4gIH1cblxuICBvblBlcnNvblRpbGVDbGljayhzZWxlY3RlZEVsZW1lbnQsIGV2ZW50KSB7XG4gICAgdGhpcy5vcGVuTW9kYWwoKTtcbiAgICB0aGlzLnVwZGF0ZU1vZGFsQ29udGVudChzZWxlY3RlZEVsZW1lbnQpO1xuICAgIHRoaXMuc2V0UHJvZmlsZUxpbmtUb01vZGFsQnRuKHNlbGVjdGVkRWxlbWVudCk7XG4gIH1cblxuICBvcGVuTW9kYWwoKSB7XG4gICAgdGhpcy5tb2RhbEluZm8uTU9EQUxfSFRNTFswXS5jbGFzc0xpc3QuYWRkKCdhZGRpdGlvbmFsLWluZm8tbW9kYWwtLW9wZW4nKTtcbiAgICB0aGlzLm1vZGFsSW5mby5NT0RBTF9PVkVSTEFZWzBdLmNsYXNzTGlzdC5hZGQoJ21vZGFsLW92ZXJsYXktLW9wZW4nKTtcbi8vICAgIHRoaXMubW9kYWxJbmZvLk1PREFMX0hUTUxbMF0uc3R5bGUudG9wID0gYCR7ZXZlbnQucGFnZVkgLSAzNDh9cHggYDtcbi8vICAgIGNvbnNvbGUubG9nKGV2ZW50KTtcbiAgfVxuXG4gIHVwZGF0ZU1vZGFsQ29udGVudChzZWxlY3RlZEVsZW1lbnQpIHtcbiAgICAvLyBDbGVhciBjb250YWluZXIgd2l0aCBwcm9qZWN0c1xuLy8gICAgdGhpcy5tb2RhbEluZm8uTU9EQUxfSU5GT19QUk9KRUNUU1swXS5pbm5lckhUTUwgPSAnJztcblxuICAgIC8vIFNldCB2YWx1ZXMgZm9yIHRpdGxlIGFuZCBwb3N0XG4gICAgdGhpcy5tb2RhbEluZm8uTU9EQUxfSU5GT19BVkFUQVJbMF0uaW5uZXJIVE1MID0gYDxpbWcgc3JjPSR7c2VsZWN0ZWRFbGVtZW50LmltYWdlfSBhbHQ9JHtzZWxlY3RlZEVsZW1lbnQudGV4dC5uYW1lfT5gO1xuICAgIHRoaXMubW9kYWxJbmZvLk1PREFMX0lORk9fTkFNRVswXS5pbm5lckhUTUwgPSBzZWxlY3RlZEVsZW1lbnQudGV4dC5uYW1lO1xuICAgIHRoaXMubW9kYWxJbmZvLk1PREFMX0lORk9fUE9TVFswXS5pbm5lckhUTUwgPSBzZWxlY3RlZEVsZW1lbnQuYWRkaXRpb25hbEluZm8ucG9zdDtcbiAgICB0aGlzLm1vZGFsSW5mby5NT0RBTF9JTkZPX1BST0pFQ1RTWzBdLmlubmVySFRNTCA9IHNlbGVjdGVkRWxlbWVudC5hZGRpdGlvbmFsSW5mby5wcm9qZWN0cztcblxuICAgIC8vIENyZWF0ZSBwcm9qZWN0IGxpbmtzXG4vLyAgICBpZiAoc2VsZWN0ZWRFbGVtZW50LmFkZGl0aW9uYWxJbmZvLnByb2plY3RzKSB7XG4vLyAgICAgIHNlbGVjdGVkRWxlbWVudC5hZGRpdGlvbmFsSW5mby5wcm9qZWN0cy5mb3JFYWNoKChwcm9qZWN0KSA9PiB7XG4vLyAgICAgICAgY29uc3QgcHJvamVjdExpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4vL1xuLy8gICAgICAgIHByb2plY3RMaW5rLmNsYXNzTmFtZSA9ICdwcm9qZWN0LWxpbmsnO1xuLy8gICAgICAgIHByb2plY3RMaW5rLmlubmVySFRNTCA9IGA8YSBocmVmPVwiJHtwcm9qZWN0LnVybH1cIj4ke3Byb2plY3QubmFtZX08L2E+YDtcbi8vXG4vLyAgICAgICAgaWYgKHRoaXMubW9kYWxJbmZvLk1PREFMX0lORk9fUFJPSkVDVFMpIHtcbi8vICAgICAgICAgIHRoaXMubW9kYWxJbmZvLk1PREFMX0lORk9fUFJPSkVDVFNbMF0uYXBwZW5kQ2hpbGQocHJvamVjdExpbmspO1xuLy8gICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICBjb25zb2xlLmxvZygnUHJvamVjdHMgbGluayBjb250YWluZXIgaXMgYWJzZW50ISEhIScpO1xuLy8gICAgICAgIH1cbi8vICAgICAgfSlcbi8vICAgIH1cbiAgfVxuXG4gIGNsb3NlTW9kYWwoKSB7XG4gICAgdGhpcy5tb2RhbEluZm8uTU9EQUxfSFRNTFswXS5jbGFzc0xpc3QucmVtb3ZlKCdhZGRpdGlvbmFsLWluZm8tbW9kYWwtLW9wZW4nKTtcbiAgICB0aGlzLm1vZGFsSW5mby5NT0RBTF9PVkVSTEFZWzBdLmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsLW92ZXJsYXktLW9wZW4nKTtcbiAgfVxuXG4gIHNldFByb2ZpbGVMaW5rVG9Nb2RhbEJ0bihzZWxlY3RlZEVsZW1lbnQpIHtcbiAgICB0aGlzLm1vZGFsSW5mby5NT0RBTF9WSUVXX1BST0ZJTEVbMF0uaHJlZiA9IHNlbGVjdGVkRWxlbWVudC5hZGRpdGlvbmFsSW5mby5wcm9maWxlTGluaztcbiAgfVxufVxuXG5jb25zdCBtb2RhbCA9IG5ldyBNb2RhbCh7XG4gIE1PREFMX0hUTUw6IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FkZGl0aW9uYWwtaW5mby1tb2RhbCcpLFxuICBNT0RBTF9JTkZPX0FWQVRBUjogZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnaW1hZ2UtaG9sZGVyJyksXG4gIE1PREFMX0lORk9fTkFNRTogZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncGVyc29uLW5hbWUnKSxcbiAgTU9EQUxfSU5GT19QT1NUOiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwZXJzb24tcG9zdCcpLFxuICBNT0RBTF9JTkZPX1BST0pFQ1RTOiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwZXJzb24tcHJvamVjdHMnKSxcbiAgTU9EQUxfT1ZFUkxBWTogZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbW9kYWwtb3ZlcmxheScpLFxuICBNT0RBTF9DQU5DRUxfQlROOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWwtY2FuY2VsLWJ0bicpLFxuICBNT0RBTF9WSUVXX1BST0ZJTEU6IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21vZGFsLWxpbmstYnRuJyksXG59KTtcblxuY2xhc3MgWm9vbSB7XG4gIGNvbnN0cnVjdG9yKGNvbnRyb2xzKSB7XG4gICAgdGhpcy5jb250cm9scyA9IGNvbnRyb2xzO1xuXG4gICAgdGhpcy5hZGRDb250cm9sRXZlbnRMaXN0ZW5lcigpO1xuICAgIHRoaXMuZnVsbFNjcmVlbk1vZGUgPSBmYWxzZTtcblxuICAgIHRoaXMuYWRkRG9jdW1lbnRFdmVudExpc3RlbmVyKCk7XG4gIH1cblxuICBhZGRDb250cm9sRXZlbnRMaXN0ZW5lcigpIHtcbiAgICB0aGlzLmNvbnRyb2xzLlpPT01fQ09OVFJPTFMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgIHRoaXMub25Db250cm9sQ2xpY2soZXZlbnQudGFyZ2V0KVxuICAgIH0pXG4gIH1cblxuICBhZGREb2N1bWVudEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZnVsbHNjcmVlbmNoYW5nZScsIHRoaXMub25Ub2dnbGVTY3JlZW5Nb2RlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJywgdGhpcy5vblRvZ2dsZVNjcmVlbk1vZGUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vemZ1bGxzY3JlZW5jaGFuZ2UnLCB0aGlzLm9uVG9nZ2xlU2NyZWVuTW9kZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignTVNGdWxsc2NyZWVuQ2hhbmdlJywgdGhpcy5vblRvZ2dsZVNjcmVlbk1vZGUpO1xuICB9XG5cbiAgb25Db250cm9sQ2xpY2soY29udHJvbEluZm8pIHtcbiAgICBpZiAoQXJyYXkuZnJvbShjb250cm9sSW5mby5jbGFzc0xpc3QpLmluZGV4T2YoJ2RlY3JlYXNlLXpvb20nKSAhPT0gLTEgJiYgdGhpcy5jb250cm9scy5aT09NX1ZBTFVFID4gNSkge1xuICAgICAgdGhpcy5kZWNyZWFzZVpvb20oKTtcblxuICAgICAgaWYgKHRoaXMuY29udHJvbHMuWk9PTV9WQUxVRSA8PSA1KSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZUNvbnRyb2woJ2RlY3JlYXNlLXpvb20nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZW5hYmxlQ29udHJvbCgnaW5jcmVhc2Utem9vbScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChBcnJheS5mcm9tKGNvbnRyb2xJbmZvLmNsYXNzTGlzdCkuaW5kZXhPZignaW5jcmVhc2Utem9vbScpICE9PSAtMSAmJiB0aGlzLmNvbnRyb2xzLlpPT01fVkFMVUUgPD0gMTUpIHtcbiAgICAgIHRoaXMuaW5jcmVhc2Vab29tKCk7XG5cbiAgICAgIGlmICh0aGlzLmNvbnRyb2xzLlpPT01fVkFMVUUgPj0gMTUpIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlQ29udHJvbCgnaW5jcmVhc2Utem9vbScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lbmFibGVDb250cm9sKCdkZWNyZWFzZS16b29tJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmZyb20oY29udHJvbEluZm8uY2xhc3NMaXN0KS5pbmRleE9mKCdmdWxsc2NyZWVuLW1vZGUnKSAhPT0gLTEpIHtcbiAgICAgIHRoaXMub3BlbkZ1bGxTY3JlZW4oKTtcbiAgICB9XG4gIH1cblxuICBpbmNyZWFzZVpvb20oKSB7XG4gICAgd3JhcHBlci5zdHlsZS50cmFuc2Zvcm0gPSBgc2NhbGUoJHsrK3RoaXMuY29udHJvbHMuWk9PTV9WQUxVRSAvIDEwfSlgO1xuICB9XG5cbiAgZGVjcmVhc2Vab29tKCkge1xuICAgIHdyYXBwZXIuc3R5bGUudHJhbnNmb3JtID0gYHNjYWxlKCR7LS10aGlzLmNvbnRyb2xzLlpPT01fVkFMVUUgLyAxMH0pYDtcbiAgfVxuXG4gIGRpc2FibGVDb250cm9sKGRpc2FibGVkQnRuKSB7XG4gICAgc3dpdGNoIChkaXNhYmxlZEJ0bikge1xuICAgICAgY2FzZSAnZGVjcmVhc2Utem9vbSc6XG4gICAgICAgIHRoaXMuY29udHJvbHMuREVDUkVBU0VfQ09OVFJPTC5jbGFzc0xpc3QuYWRkKCd6b29tLWNvbnRyb2wtLWRpc2FibGVkJyk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdpbmNyZWFzZS16b29tJzpcbiAgICAgICAgdGhpcy5jb250cm9scy5JTkNSRUFTRV9DT05UUk9MLmNsYXNzTGlzdC5hZGQoJ3pvb20tY29udHJvbC0tZGlzYWJsZWQnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZW5hYmxlQ29udHJvbChlbmFibGVkQnRuKSB7XG4gICAgc3dpdGNoIChlbmFibGVkQnRuKSB7XG4gICAgICBjYXNlICdkZWNyZWFzZS16b29tJzpcbiAgICAgICAgdGhpcy5jb250cm9scy5ERUNSRUFTRV9DT05UUk9MLmNsYXNzTGlzdC5yZW1vdmUoJ3pvb20tY29udHJvbC0tZGlzYWJsZWQnKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2luY3JlYXNlLXpvb20nOlxuICAgICAgICB0aGlzLmNvbnRyb2xzLklOQ1JFQVNFX0NPTlRST0wuY2xhc3NMaXN0LnJlbW92ZSgnem9vbS1jb250cm9sLS1kaXNhYmxlZCcpO1xuICAgIH1cbiAgfVxuXG4gIG9wZW5GdWxsU2NyZWVuKCkge1xuICAgIGxldCBlbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb250YWluZXJcIik7XG5cbiAgICBpZiAoZWxlbS5yZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgZWxlbS5yZXF1ZXN0RnVsbHNjcmVlbigpO1xuICAgIH0gZWxzZSBpZiAoZWxlbS5tb3pSZXF1ZXN0RnVsbFNjcmVlbikge1xuICAgICAgZWxlbS5tb3pSZXF1ZXN0RnVsbFNjcmVlbigpO1xuICAgIH0gZWxzZSBpZiAoZWxlbS53ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbikge1xuICAgICAgZWxlbS53ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbigpO1xuICAgICAgY29uc29sZS5sb2coZWxlbS53ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbik7XG4gICAgfSBlbHNlIGlmIChlbGVtLm1zUmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICAgIGVsZW0ubXNSZXF1ZXN0RnVsbHNjcmVlbigpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5mdWxsU2NyZWVuTW9kZSkge1xuICAgICAgaWYgKGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKSB7XG4gICAgICAgIGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICB9IGVsc2UgaWYgKGRvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKSB7XG4gICAgICAgIGRvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICB9IGVsc2UgaWYgKGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4pIHtcbiAgICAgICAgZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbigpO1xuICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKSB7XG4gICAgICAgIGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvblRvZ2dsZVNjcmVlbk1vZGUoKSB7XG4gICAgdGhpcy5mdWxsU2NyZWVuTW9kZSA9ICF0aGlzLmZ1bGxTY3JlZW5Nb2RlO1xuICB9XG59XG5cbmNvbnN0IHpvb20gPSBuZXcgWm9vbSh7XG4gIFpPT01fQ09OVFJPTFM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy56b29tLWNvbnRyb2xzJyksXG4gIERFQ1JFQVNFX0NPTlRST0w6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZWNyZWFzZS16b29tJyksXG4gIElOQ1JFQVNFX0NPTlRST0w6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbmNyZWFzZS16b29tJyksXG4gIFpPT01fVkFMVUU6IDEwLFxufSk7XG5cbndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKGV2ZW50KSA9PiB7XG4gIGlmIChBcnJheS5mcm9tKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QpLmluZGV4T2YoJ25vZGUnKSAhPT0gLTEpIHtcbiAgICBnZXRBZGRpdGlvbmFsSW5mbyhldmVudCk7XG4gIH1cbn0pKTtcblxuY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKGV2ZW50KSA9PiB7XG4gIG1vZGFsLmNsb3NlTW9kYWwoZXZlbnQpO1xufSkpO1xuXG5mdW5jdGlvbiBnZXRBZGRpdGlvbmFsSW5mbyhldmVudCkge1xuICBjb25zdCBzZWxlY3RlZEVsZW1lbnQgPSBwZXJzb25zLmZpbmQoKGl0ZW0pID0+IHtcbiAgICByZXR1cm4gaXRlbS5IVE1MaWQgPT0gZXZlbnQudGFyZ2V0LmlkO1xuICB9KTtcblxuICBtb2RhbC5vblBlcnNvblRpbGVDbGljayhzZWxlY3RlZEVsZW1lbnQsIGV2ZW50KTtcbn1cblxubW9kYWxPdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKChldmVudCkgPT4ge1xuICBtb2RhbC5jbG9zZU1vZGFsKGV2ZW50KTtcbn0pKTtcblxudHJlZSA9IG5ldyBUcmVhbnQoY2hhcnRfY29uZmlnKTtcblxuLypEaXZpc2lvbnMgU2VjdGlvbiovXG5cbmxldCBoZWFkc09mRGl2aXNpb25zID0gW3tcbiAgXCJuYW1lXCI6IFwiSW5uYSBEdWtob3RhXCIsXG4gIFwiYXZhdGFyXCI6IFwiaHR0cHM6Ly9nbG8tYXNzZXRzLmdsb2JhbGxvZ2ljLmNvbS9zeXN0ZW0vZGF0YS8yMzgyMi9wcm9maWxlLzQwMjg4OC5qcGc/MTQyMzc4NTY0NFwiLFxuICBcImRpdmlzaW9uTmFtZVwiOiBcIlRhbGVudCBBcXVpc2l0aW9uIEdyb3VwIFwiLFxuICBcInByb2ZpbGVMaW5rXCI6IFwiaHR0cHM6Ly9nbG8uZ2xvYmFsbG9naWMuY29tL3VzZXJzL3Byb2ZpbGUvaW5uYS5kdWtob3RhXCJcbn0sIHtcbiAgXCJuYW1lXCI6IFwiQW5uYSBWZXNlbG92YVwiLFxuICBcImF2YXRhclwiOiBcImh0dHBzOi8vZ2xvLWFzc2V0cy5nbG9iYWxsb2dpYy5jb20vc3lzdGVtL2RhdGEvNjU4MTUvcHJvZmlsZS9JTUdfNzEyOS5KUEc/MTUzNDc2NjQxNlwiLFxuICBcImRpdmlzaW9uTmFtZVwiOiBcIlJlc291cmNpbmcgXCIsXG4gIFwicHJvZmlsZUxpbmtcIjogXCJodHRwczovL2dsby5nbG9iYWxsb2dpYy5jb20vdXNlcnMvcHJvZmlsZS9hbm5hLnZlc2Vsb3ZhXCJcbn0sIHtcbiAgXCJuYW1lXCI6IFwiRWxsaW5hIE1lZHluc2thIFwiLFxuICBcImF2YXRhclwiOiBcImh0dHBzOi8vZ2xvLWFzc2V0cy5nbG9iYWxsb2dpYy5jb20vc3lzdGVtL2RhdGEvNDg3NDUvcHJvZmlsZS9JTUdfOTM1MC5qcGc/MTQ5ODIwMTY2NFwiLFxuICBcImRpdmlzaW9uTmFtZVwiOiBcIlBSICYgTWFya2V0aW5nXCIsXG4gIFwicHJvZmlsZUxpbmtcIjogXCJodHRwczovL2dsby5nbG9iYWxsb2dpYy5jb20vdXNlcnMvcHJvZmlsZS9lbGxpbmEubWVkeW5za2FcIlxufSwge1xuICBcIm5hbWVcIjogXCJTZXJnaWkgU2htYXRrb1wiLFxuICBcImF2YXRhclwiOiBcImh0dHBzOi8vZ2xvLWFzc2V0cy5nbG9iYWxsb2dpYy5jb20vc3lzdGVtL2RhdGEvNjA5NTYvcHJvZmlsZS9TZXJoaWlfU2htYXRrby5qcGc/MTUyNjk5OTUyOVwiLFxuICBcImRpdmlzaW9uTmFtZVwiOiBcIklUIEluZnJhc3RydWN0dXJlXCIsXG4gIFwicHJvZmlsZUxpbmtcIjogXCJodHRwczovL2dsby5nbG9iYWxsb2dpYy5jb20vdXNlcnMvcHJvZmlsZS9zZXJoaWkuc2htYXRrb1wiXG59LCB7XG4gIFwibmFtZVwiOiBcIlZsYWR5c2xhdiBEb21pblwiLFxuICBcImF2YXRhclwiOiBcImh0dHBzOi8vZ2xvLWFzc2V0cy5nbG9iYWxsb2dpYy5jb20vc3lzdGVtL2RhdGEvNTE0NDkvcHJvZmlsZS9WbGFkeXNsYXZfRG9taW4uanBnPzE1MDQ2OTc2ODdcIixcbiAgXCJkaXZpc2lvbk5hbWVcIjogXCJFbXBsb3llZSBTZXJ2aWNlcyBcIixcbiAgXCJwcm9maWxlTGlua1wiOiBcImh0dHBzOi8vZ2xvLmdsb2JhbGxvZ2ljLmNvbS91c2Vycy9wcm9maWxlL3ZsYWR5c2xhdi5kb21pblwiXG59LCB7XG4gIFwibmFtZVwiOiBcIk5hdGFsaXlhIE9zaXBlbmtvXCIsXG4gIFwiYXZhdGFyXCI6IFwiaHR0cHM6Ly9nbG8tYXNzZXRzLmdsb2JhbGxvZ2ljLmNvbS9zeXN0ZW0vZGF0YS80MTI5Mi9wcm9maWxlL0lNR185NTU2LmpwZz8xNDc4Njk1NTQxXCIsXG4gIFwiZGl2aXNpb25OYW1lXCI6IFwiUHJvY2VzcyBNYW5hZ2VtZW50IChQTUcpXCIsXG4gIFwicHJvZmlsZUxpbmtcIjogXCJodHRwczovL2dsby5nbG9iYWxsb2dpYy5jb20vdXNlcnMvcHJvZmlsZS9uYXRhbGlpYS5vc3lwZW5rb1wiXG59LCB7XCJuYW1lXCI6IFwiVEJEXCIsIFwiYXZhdGFyXCI6IFwiXCIsIFwiZGl2aXNpb25OYW1lXCI6IFwiQnVzaW5lc3MgUGFydG5lciBcIiwgXCJwcm9maWxlTGlua1wiOiBcIlwifV07XG5cbmNsYXNzIEZ1bmN0aW9uYWxEaXZpc2lvbnNIZWFkcyB7XG4gIGNvbnN0cnVjdG9yKGRpdmlzaW9uc0luZm8pIHtcbiAgICB0aGlzLmRpdmlzaW9uc0luZm8gPSBkaXZpc2lvbnNJbmZvO1xuXG4gICAgY29uc29sZS5sb2codGhpcy5kaXZpc2lvbnNJbmZvKTtcbiAgICB0aGlzLnNldERhdGFUaWxlKCk7XG4gIH1cblxuICBzZXREYXRhVGlsZSgpIHtcbiAgICBoZWFkc09mRGl2aXNpb25zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IHRpbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgdGlsZS5jbGFzc05hbWUgPSAnZGl2aXNpb25zX2hlYWRzIHRpbGUtd3JhcHBlcic7XG4gICAgICB0aWxlLmlubmVySFRNTCA9IGBcbiAgICAgICAgIDxkaXYgY2xhc3M9XCJwZXJzb24tdGlsZSBkaXZpc2lvbi1oZWFkLXRpbGVcIj5cbiAgICAgICAgICAgPGEgaHJlZj1cIiR7aXRlbS5wcm9maWxlTGlua31cIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cInByb2ZpbGUtbGlua1wiPlxuICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aWxlLWltYWdlLWhvbGRlciBkaXZpc2lvbi1oZWFkX19pbWFnZS1ob2xkZXJcIj5cbiAgICAgICAgICAgICAgICAgICR7dGhpcy5vbkNoZWNrSW1hZ2UoaXRlbSl9XG4gICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPHAgY2xhc3M9XCJub2RlLW5hbWUgZGl2aXNpb24taGVhZF9fbmFtZVwiPiR7aXRlbS5uYW1lfTwvcD5cbiAgICAgICAgICAgICAgPHAgY2xhc3M9XCJub2RlLW5hbWUgZGl2aXNpb24taGVhZF9fZGVzY3JpcHRpb25cIj4ke2l0ZW0uZGl2aXNpb25OYW1lfTwvcD5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgIDwvZGl2PmA7XG5cbiAgICAgIHRoaXMuZGl2aXNpb25zSW5mby5ESVZJU0lPTlNfSEVBRFNfQ09OVEFJTkVSWzBdLmFwcGVuZENoaWxkKHRpbGUpO1xuICAgIH0pO1xuICB9XG5cbiAgb25DaGVja0ltYWdlKGl0ZW0pIHtcbiAgICBpZiAoaXRlbS5hdmF0YXIpIHtcbiAgICAgIHJldHVybiBgPGltZyBzcmM9JHtpdGVtLmF2YXRhcn0gYWx0PSR7aXRlbS5uYW1lfT5gXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJlbXB0eS1pbWFnZS1zdGF0ZVwiPjxzcGFuPmBcbiAgICB9XG5cbiAgfVxufVxuXG5uZXcgRnVuY3Rpb25hbERpdmlzaW9uc0hlYWRzKHtcbiAgRElWSVNJT05TX0hFQURTX0NPTlRBSU5FUjogZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZGl2aXNpb24taGVhZHMnKSxcbiAgRElWSVNJT05TX0hFQURTOiBoZWFkc09mRGl2aXNpb25zLFxufSk7XG5cbiJdLCJzb3VyY2VSb290IjoiIn0=